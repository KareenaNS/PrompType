{"version":3,"file":"world-map-props.js","sourceRoot":"","sources":["../../src/components/world-map/world-map-props.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Copyright (c) 2020, 2021, 2022, 2023, 2024 Visa, Inc.\n *\n * This source code is licensed under the MIT license\n * https://github.com/visa/visa-chart-components/blob/master/LICENSE\n *\n **/\nexport interface IWorldMapProps {\n  /**\n   * @shortDescription Internationalization properties of the chart\n   * @controlName TextArea\n   * @groupName Localization\n   * @sortOrder 1 */\n  localization: ILocalizationType;\n\n  /**\n   * @shortDescription Sets the heading level (which also sets sublevels) for the chart. \"p\", \"span\", and \"div\" are also valid.\n   * @controlName Select\n   * @groupName Base\n   * @sortOrder 6 */\n  highestHeadingLevel: string | number;\n\n  /**\n   * @shortDescription Main title of the chart\n   * @controlName TextField\n   * @groupName Base\n   * @sortOrder 1 */\n  mainTitle: string;\n\n  /**\n   * @shortDescription Subtitle of the chart. A string or an array of objects. Objects should contain text (one/multiple word(s)/number(s) as a single string) and color (HEX) keys. Optional key: index and mode (text | background).\n   * @controlName TextField\n   * @groupName Base\n   * @sortOrder 2 */\n  subTitle: string | ISubTitleType;\n\n  /**\n   * @shortDescription Height of the chart area in pixels\n   * @controlName Slider\n   * @groupName Base\n   * @sortOrder 3 */\n  height: number;\n\n  /**\n   * @shortDescription Width of the chart area in pixels\n   * @controlName Slider\n   * @groupName Base\n   * @sortOrder 4 */\n  width: number;\n\n  /**\n   * @shortDescription Margin between the subtitle and the chart area, or between the title and chart area if no subtitle is specified\n   * @controlName TextArea\n   * @groupName Margin */\n  margin: IBoxModelType;\n\n  /**\n   * @shortDescription Padding between plot area and axes lines\n   * @controlName TextArea\n   * @groupName Padding */\n  padding: IBoxModelType;\n\n  /**\n   * @shortDescription Data used to create chart\n   * @controlName TextArea\n   * @groupName Data */\n  data: object[];\n\n  /**\n   * @shortDescription ID used to identify chart (must be unique), helpful for validation messages. Defaults to UUID v4 standard.\n   * @controlName TextField\n   * @groupName Data */\n  uniqueID: string;\n\n  /**\n   * @shortDescription Adds annotations to the chart, see d3-annotation\n   * @controlName TextArea\n   * @groupName Annotations */\n  annotations: object[];\n\n  /**\n   * @shortDescription  Key used to determine marker's key property\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 3 */\n  markerAccessor: string;\n\n  /**\n   * @shortDescription  Key used to determine marker's name property\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 4 */\n  markerNameAccessor: string;\n\n  /**\n   * @shortDescription  Key used to determine country's key property (ISO 3-Digit Code)\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 1 */\n  joinAccessor: string;\n\n  /**\n   * @shortDescription  Key used to determine country's name property\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 2 */\n  joinNameAccessor: string;\n\n  /**\n   * @shortDescription  Key used to determine the country/marker's numeric property\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 7 */\n  valueAccessor: string;\n\n  /**\n   * @shortDescription  Key used to determine marker's latitude property\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 5 */\n  latitudeAccessor: string;\n\n  /**\n   * @shortDescription  Key used to determine marker's longitude property\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 6 */\n  longitudeAccessor: string;\n\n  /**\n   * @shortDescription Can be used to sort the markers ascending/descending to ensure they are layered correctly\n   * @controlName Radio\n   * @groupName Data\n   * @sortOrder 8 */\n  sortOrder: string;\n\n  /**\n   * @shortDescription Overrides the calculated default min value for marker/color scales\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 9 */\n  minValueOverride: number;\n\n  /**\n   * @shortDescription Overrides the calculated default max value for marker/color scales\n   * @controlName TextField\n   * @groupName Data\n   * @sortOrder 10 */\n  maxValueOverride: number;\n\n  /**\n   * @shortDescription Key used to determine country/marker color\n   * @controlName TextField\n   * @groupName Data */\n  groupAccessor: string;\n\n  /**\n   * @shortDescription Sets the projection of the world-map to display * = Recommened for use.\n   * @controlName Select\n   * @groupName Map\n   * @sortOrder 1 */\n  mapProjection: string;\n\n  /**\n   * @shortDescription Adjusts the zoom of the map (take caution when modifying this prop).\n   * @controlName Slider\n   * @groupName Map\n   * @sortOrder 2 */\n  mapScaleZoom: number;\n\n  /**\n   * @shortDescription Sets the color palette of the countries/markers. Overridden by colors.\n   * @controlName Select\n   * @groupName Style */\n  colorPalette: string;\n\n  /**\n   * @shortDescription Sets the quality of the map's vector shapes.\n   * @controlName Select\n   * @groupName Map */\n  quality: string;\n\n  /**\n   * @shortDescription Accepts array of color strings or values to customize colors.\n   * @controlName TextArea\n   * @groupName Style */\n  colors: string[];\n\n  /**\n   * @shortDescription Specifies the number of steps to use from colorPalette, overridden by colors.\n   * @controlName Slider\n   * @groupName Style */\n  colorSteps: number;\n\n  /**\n   * @shortDescription Object for setting various style attribute for map dots/markers\n   * @controlName TextArea\n   * @groupName Markers */\n  markerStyle: IMarkerStyleType;\n\n  /**\n   * @shortDescription Object for setting various style attribute for countries\n   * @controlName TextArea\n   * @groupName Countries */\n  countryStyle: ICountryStyleType;\n\n  /**\n   * @shortDescription Sets the color and opacity of marker/countries during mouse over\n   * @controlName TextArea\n   * @groupName Style */\n  hoverStyle: IHoverStyleType;\n\n  /**\n   * @shortDescription Sets the styling of markers/countries when they are selected\n   * @controlName TextArea\n   * @groupName Style */\n  clickStyle: IClickStyleType;\n\n  /**\n   * @shortDescription Sets opacity of element on hovering it\n   * @controlName Slider\n   * @groupName Style */\n  hoverOpacity: number;\n\n  /**\n   * @shortDescription Changes pointer type during mouse over on countries/markers\n   * @controlName Radio\n   * @groupName Style */\n  cursor: string;\n\n  /**\n   * @shortDescription Sets visibility and label of chart legend\n   * @controlName TextArea\n   * @groupName Labels */\n  legend: ILegendType;\n\n  /**\n   * @shortDescription Manages messages and settings for chart accessibility\n   * @controlName TextArea\n   * @groupName Accessibility */\n  accessibility: IAccessibilityType;\n\n  /**\n   * @shortDescription Manages settings for chart animation, property 'disabled' defaults to false or undefined\n   * @controlName TextArea\n   * @groupName Accessibility */\n  animationConfig: IAnimationConfig;\n\n  /**\n   * @shortDescription Controls visibility, styling and placement of data labels\n   * @controlName TextArea\n   * @groupName Labels */\n  dataLabel: IDataLabelType;\n\n  /**\n   * @shortDescription Enables custom, user friendly names for data keys\n   * @controlName TextArea\n   * @groupName Labels */\n  dataKeyNames: object;\n\n  /**\n   * @shortDescription When selected, allows tooltips to be displayed\n   * @controlName Toggle\n   * @groupName Labels */\n  showTooltip: boolean;\n\n  /**\n   * @shortDescription Customize the tooltip content\n   * @controlName TextArea\n   * @groupName Labels */\n  tooltipLabel: ITooltipLabelType;\n\n  /**\n   * @shortDescription Sets the column names of data to interact with\n   * @controlName TextArea\n   * @groupName Style */\n  interactionKeys: string[];\n\n  /**\n   * @shortDescription Toggles whether to display background map gridlines\n   * @controlName Toggle\n   * @groupName Map */\n  showGridlines: boolean;\n\n  /**\n   * @shortDescription Suppresses and disables all event emitters. Setting to true can increase performance for non-interactive charts.\n   * @controlName Toggle\n   * @groupName Events */\n  suppressEvents: boolean;\n\n  /**\n   * @shortDescription Set a callback for click event on each data point.\n   * @controlName Toggle\n   * @groupName Events */\n  clickEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when mouse enters the chart.\n   * @controlName Toggle\n   * @groupName Events */\n  hoverEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when mouse leaves the chart.\n   * @controlName Toggle\n   * @groupName Events */\n  mouseOutEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart initially loads.\n   * @controlName Toggle\n   * @groupName Events */\n  initialLoadEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart's initial load ends.\n   * @controlName Toggle\n   * @groupName Events */\n  initialLoadEndEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart drawing starts.\n   * @controlName Toggle\n   * @groupName Events */\n  drawStartEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart drawing ends.\n   * @controlName Toggle\n   * @groupName Events */\n  drawEndEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart geometry transitions end.\n   * @controlName Toggle\n   * @groupName Events */\n  transitionEndEvent: any;\n\n  /**\n   * @shortDescription\n   * @controlName TextArea\n   * @groupName Style */\n  hoverHighlight: object;\n\n  /**\n   * @shortDescription\n   * @controlName TextArea\n   * @groupName Style */\n  clickHighlight: object[];\n}\n\nexport interface IDataLabelType {\n  visible: boolean;\n  placement?: string;\n  labelAccessor?: string;\n  format?: string;\n  collisionHideOnly?: boolean;\n  collisionPlacement?: string;\n}\n\nexport interface IBoxModelType {\n  top: number;\n  bottom: number;\n  right: number;\n  left: number;\n}\nexport interface ILegendType {\n  visible: boolean;\n  interactive?: boolean;\n  type?: string;\n  format?: string;\n  labels?: string | string[];\n}\nexport interface IMarkerStyleType {\n  visible: boolean;\n  fill?: boolean;\n  blend?: boolean;\n  radius?: number;\n  radiusRange?: string | number[];\n  opacity?: number;\n  color?: string;\n  strokeWidth?: string;\n}\nexport interface ICountryStyleType {\n  fill: boolean;\n  opacity?: number;\n  color?: string;\n  strokeWidth?: string;\n}\nexport interface IHoverStyleType {\n  color?: string;\n  strokeWidth?: string;\n}\nexport interface IClickStyleType {\n  color?: string;\n  opacity?: number;\n  strokeWidth?: string;\n  showLabels?: boolean;\n}\nexport interface ITooltipLabelType {\n  labelAccessor: string[];\n  labelTitle?: string[];\n  format: string | string[];\n}\n\nexport interface ILocalizationType {\n  language?: string | object;\n  numeralLocale?: string | object;\n  skipValidation?: boolean;\n  overwrite?: boolean;\n}\n\nexport interface IAccessibilityType {\n  longDescription?: string;\n  executiveSummary?: string;\n  purpose?: string;\n  contextExplanation?: string;\n  title?: string;\n  elementDescriptionAccessor?: string;\n  statisticalNotes?: string;\n  structureNotes?: string;\n  includeDataKeyNames?: boolean;\n  hideDataTableButton?: boolean;\n  disableValidation?: boolean;\n  elementsAreInterface?: any;\n  onChangeFunc?: any;\n  hideTextures?: boolean;\n  hideStrokes?: boolean;\n  showSmallLabels?: boolean;\n  showExperimentalTextures?: boolean;\n  keyboardNavConfig?: IKeyConfig;\n}\nexport interface IAnimationConfig {\n  disabled?: boolean;\n}\nexport interface IKeyConfig {\n  disabled?: boolean;\n}\n\nexport interface ISubTitleType {\n  text?: string;\n  keywordsHighlight?: object[];\n}\n"]}