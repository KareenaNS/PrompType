{"version":3,"file":"pie-chart-props.js","sourceRoot":"","sources":["../../src/components/pie-chart/pie-chart-props.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Copyright (c) 2020, 2021, 2022, 2023, 2024 Visa, Inc.\n *\n * This source code is licensed under the MIT license\n * https://github.com/visa/visa-chart-components/blob/master/LICENSE\n *\n **/\nexport interface IPieChartProps {\n  /**\n   * @shortDescription Internationalization properties of the chart\n   * @controlName TextArea\n   * @groupName Localization\n   * @sortOrder 1 */\n  localization: ILocalizationType;\n\n  /**\n   * @shortDescription Sets the heading level (which also sets sublevels) for the chart. \"p\", \"span\", and \"div\" are also valid.\n   * @controlName Select\n   * @groupName Base\n   * @sortOrder 6 */\n  highestHeadingLevel: string | number;\n\n  /**\n   * @shortDescription Main title of the chart\n   * @controlName TextField\n   * @groupName Base */\n  mainTitle: string;\n\n  /**\n   * @shortDescription Subtitle of the chart. A string or an array of objects. Objects should contain text (one/multiple word(s)/number(s) as a single string) and color (HEX) keys. Optional key: index and mode (text | background).\n   * @controlName TextField\n   * @groupName Base */\n  subTitle: string | ISubTitleType;\n\n  /**\n   * @shortDescription If specified, adds a main title to the center of the donut chart\n   * @controlName TextField\n   * @groupName Base */\n  centerTitle: string;\n\n  /**\n   * @shortDescription If specified, adds a subtitle to the center of the donut chart\n   * @controlName TextField\n   * @groupName Base */\n  centerSubTitle: string;\n\n  /**\n   * @shortDescription Height of the chart area in pixels\n   * @controlName Slider\n   * @groupName Base */\n  height: number;\n\n  /**\n   * @shortDescription Width of the chart area in pixels\n   * @controlName Slider\n   * @groupName Base */\n  width: number;\n  // innerTitle: string;\n\n  /**\n   * @shortDescription Manages messages and settings for chart accessibility\n   * @controlName TextArea\n   * @groupName Accessibility */\n  accessibility: IAccessibilityType;\n\n  /**\n   * @shortDescription Manages settings for chart animation, property 'disabled' defaults to false or undefined\n   * @controlName TextArea\n   * @groupName Accessibility */\n  animationConfig: IAnimationConfig;\n\n  /**\n   * @shortDescription Margin between the subtitle and the chart area, or between the title and chart area if no subtitle is specified\n   * @controlName TextArea\n   * @groupName Margin */\n  margin: IBoxModelType;\n\n  /**\n   * @shortDescription Padding between plot area and axes lines\n   * @controlName TextArea\n   * @groupName Padding */\n  padding: IBoxModelType;\n\n  /**\n   * @shortDescription Data used to create chart\n   * @controlName TextArea\n   * @groupName Data */\n  data: object[];\n\n  /**\n   * @shortDescription ID used to identify chart (must be unique), helpful for validation messages. Defaults to UUID v4 standard.\n   * @controlName TextField\n   * @groupName Data */\n  uniqueID: string;\n\n  /**\n   * @shortDescription Adds annotations to the chart, see d3-annotation\n   * @controlName TextArea\n   * @groupName Annotations */\n  annotations: object[];\n\n  /**\n   * @shortDescription  Key used to determine pie's categorical property\n   * @controlName TextField\n   * @groupName Data */\n  ordinalAccessor: string;\n\n  /**\n   * @shortDescription  Key used to determine pie's numeric property\n   * @controlName TextField\n   * @groupName Data */\n  valueAccessor: string;\n\n  /**\n   * @shortDescription Sorts the bars into asceneding or descending order, or clears all sorting\n   * @controlName Radio\n   * @groupName Data */\n  sortOrder: string;\n\n  /**\n   * @shortDescription Sets the color palette used in the chart (overriden by colors)\n   * @controlName Select\n   * @groupName Style */\n  colorPalette: string;\n\n  /**\n   * @shortDescription Accepts array of color strings or values to customize slice colors\n   * @controlName TextArea\n   * @groupName Style */\n  colors: string[];\n\n  /**\n   * @shortDescription Sets the size of the filled circle in the middle of the pie as a proportion of the total pie\n   * @controlName Slider\n   * @groupName Style */\n  innerRatio: number;\n\n  /**\n   * @shortDescription Displays edge line around each section\n   * @controlName Toggle\n   * @groupName Style */\n  showEdgeLine: boolean;\n\n  /**\n   * @shortDescription Sets the color and opacity of bar during mouse over\n   * @controlName TextArea\n   * @groupName Style */\n  hoverStyle: IHoverStyleType;\n\n  /**\n   * @shortDescription Sets the styling of a bars when they are selected\n   * @controlName TextArea\n   * @groupName Style */\n  clickStyle: IClickStyleType;\n\n  /**\n   * @shortDescription Sets the styling of the reference line\n   * @controlName TextArea\n   * @groupName Reference_Line */\n  referenceStyle: IReferenceStyleType;\n\n  /**\n   * @shortDescription Changes pointer type during mouse over on pies\n   * @controlName Radio\n   * @groupName Style */\n  cursor: string;\n\n  /**\n   * @shortDescription Sets the opacity of all other pies other than the one the mouse is over\n   * @controlName Slider\n   * @groupName Style */\n  hoverOpacity: number;\n\n  /**\n   * @shortDescription Displays data label value as a percentage of the whole\n   * @controlName Toggle\n   * @groupName Labels */\n  showPercentage: boolean;\n\n  /**\n   * @shortDescription When selected, allows tooltips to be displayed\n   * @controlName Toggle\n   * @groupName Labels */\n  showTooltip: boolean;\n\n  /**\n   * @shortDescription Customize the tooltip content\n   * @controlName TextArea\n   * @groupName Labels */\n  tooltipLabel: ITooltipLabelType;\n  /**\n   * @shortDescription When selected, adds data labels\n   * @controlName TextArea\n   * @groupName Labels */\n  dataLabel: IDataLabelType;\n\n  /**\n   * @shortDescription Enables custom, user friendly names for data keys\n   * @controlName TextArea\n   * @groupName Labels */\n  dataKeyNames: object;\n\n  /**\n   * @shortDescription When selected, allows label notes to be displayed\n   * @controlName Toggle\n   * @groupName Labels */\n  showLabelNote: boolean;\n\n  /**\n   * @shortDescription Sets distance of labels from chart\n   * @controlName Slider\n   * @groupName Labels */\n  labelOffset: number;\n\n  /**\n   * @shortDescription Data used to set the location and labeling of the reference line\n   * @controlName TextArea\n   * @groupName Reference_Line */\n  referenceData: object[];\n\n  /**\n   * @shortDescription Sets the column names of data to interact with\n   * @controlName TextArea\n   * @groupName Style */\n  interactionKeys: any[];\n\n  /**\n   * @shortDescription Suppresses and disables all event emitters. Setting to true can increase performance for non-interactive charts.\n   * @controlName Toggle\n   * @groupName Events */\n  suppressEvents: boolean;\n\n  /**\n   * @shortDescription Set a callback for click event on each data point.\n   * @controlName Toggle\n   * @groupName Events */\n  clickEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when mouse enters the chart.\n   * @controlName Toggle\n   * @groupName Events */\n  hoverEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when mouse leaves the chart.\n   * @controlName Toggle\n   * @groupName Events */\n  mouseOutEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart initially loads.\n   * @controlName Toggle\n   * @groupName Events */\n  initialLoadEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart's initial load ends.\n   * @controlName Toggle\n   * @groupName Events */\n  initialLoadEndEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart drawing starts.\n   * @controlName Toggle\n   * @groupName Events */\n  drawStartEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart drawing ends.\n   * @controlName Toggle\n   * @groupName Events */\n  drawEndEvent: any;\n\n  /**\n   * @shortDescription Set a callback to execute when chart geometry transitions end.\n   * @controlName Toggle\n   * @groupName Events */\n  transitionEndEvent: any;\n\n  /**\n   * @shortDescription\n   * @controlName TextArea\n   * @groupName Style */\n  hoverHighlight: any;\n  /**\n   * @shortDescription\n   * @controlName TextArea\n   * @groupName Style */\n  clickHighlight: any[];\n}\nexport interface IDataLabelType {\n  visible: boolean;\n  placement?: string;\n  labelAccessor?: string;\n  format?: string;\n  collisionHideOnly?: boolean;\n  collisionPlacement?: string;\n}\nexport interface IHoverStyleType {\n  color: string;\n  strokeWidth: string | number;\n}\n\nexport interface IClickStyleType {\n  color: string;\n  strokeWidth: string | number;\n}\nexport interface IReferenceStyleType {\n  color?: string;\n  strokeWidth?: string;\n  opacity?: number;\n  dashed?: string;\n}\n\nexport interface IBoxModelType {\n  top: number;\n  bottom: number;\n  right: number;\n  left: number;\n}\nexport interface ITooltipLabelType {\n  labelAccessor: string[];\n  labelTitle: string[];\n  format: string | string[];\n}\n\nexport interface ILocalizationType {\n  language?: string | object;\n  numeralLocale?: string | object;\n  skipValidation?: boolean;\n  overwrite?: boolean;\n}\n\nexport interface IAccessibilityType {\n  longDescription?: string;\n  executiveSummary?: string;\n  purpose?: string;\n  contextExplanation?: string;\n  title?: string;\n  elementDescriptionAccessor?: string;\n  statisticalNotes?: string;\n  structureNotes?: string;\n  includeDataKeyNames?: boolean;\n  hideDataTableButton?: boolean;\n  disableValidation?: boolean;\n  elementsAreInterface?: any;\n  onChangeFunc?: any;\n  hideTextures?: boolean;\n  hideStrokes?: boolean;\n  showSmallLabels?: boolean;\n  showExperimentalTextures?: boolean;\n  keyboardNavConfig?: IKeyConfig;\n}\nexport interface IAnimationConfig {\n  disabled?: boolean;\n}\nexport interface IKeyConfig {\n  disabled?: boolean;\n}\n\nexport interface ISubTitleType {\n  text?: string;\n  keywordsHighlight?: object[];\n}\n"]}