/**
 * Copyright (c) 2020, 2021, 2022, 2023 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
import { h } from "@stencil/core";
import { DataTableDefaultValues } from "./data-table-default-values";
import { select } from "d3-selection";
import Utils from "@visa/visa-charts-utils";
const { translate, getLicenses } = Utils;
export class DataTable {
    constructor() {
        this.uniqueID = undefined;
        this.language = DataTableDefaultValues.language;
        this.isCompact = DataTableDefaultValues.isCompact;
        this.hideDataTable = DataTableDefaultValues.hideDataTable;
        this.margin = DataTableDefaultValues.margin;
        this.padding = DataTableDefaultValues.padding;
        this.tableColumns = undefined;
        this.secondaryTableColumns = undefined;
        this.dataKeyNames = undefined;
        this.data = undefined;
        this.secondaryData = undefined;
        this.unitTest = false;
        this.showTable = this.hideDataTable ? true : false;
    }
    componentWillLoad() {
        this.tableColumns = this.tableColumns ? this.tableColumns : (this.tableColumns = Object.keys(this.data[0]));
    }
    componentWillUpdate() {
        this.init();
        this.tableColumns = this.tableColumns ? this.tableColumns : (this.tableColumns = Object.keys(this.data[0]));
    }
    componentDidLoad() {
        this.drawTable();
    }
    componentDidUpdate() {
        this.drawTable();
    }
    reSetRoot() {
        // if we have a hide prop then we use vcc-sr class
        select(this.dataTableEl)
            .classed('vcc-sr', this.hideDataTable)
            .select('#visa-viz-data-table-button-' + this.uniqueID)
            .classed('vcc-state--active', this.showTable);
        if (this.table) {
            this.table.remove();
            this.table = null;
        }
        if (this.secondaryTable) {
            this.secondaryTable.remove();
            this.secondaryTable = null;
        }
        if (!this.table && this.showTable) {
            this.defaults = true;
            this.table = select(this.dataTableEl)
                .select('#visa-viz-data-table-container-' + this.uniqueID)
                .append('table')
                .attr('class', 'vcc-data-table vcc-state--single-select')
                .classed('vcc-state--compact', this.isCompact)
                .attr('data-header', 'header');
            if (this.secondaryData) {
                this.table.attr('aria-label', `${translate('dataTable.table1', this.language)}.`);
                this.secondaryTable = select(this.dataTableEl)
                    .select('#visa-viz-data-table-container-' + this.uniqueID)
                    .append('table')
                    .attr('class', 'vcc-secondary-data-table vcc-data-table vcc-state--single-select')
                    .attr('aria-label', `${translate('dataTable.table2', this.language)}.`)
                    .classed('vcc-state--compact', this.isCompact)
                    .attr('data-header', 'header');
            }
        }
    }
    drawTable() {
        this.reSetRoot();
        // start by drawing the table header
        if (this.showTable) {
            this.thead = this.table
                .append('thead')
                .attr('class', 'vcc-thead')
                .append('tr')
                .attr('class', 'vcc-tr');
            // now add the column headers to the table header
            this.thead
                .selectAll('th')
                .data(this.tableColumns)
                .enter()
                .append('th')
                .attr('class', 'vcc-th')
                .attr('scope', 'col')
                .text(d => (this.dataKeyNames && this.dataKeyNames[d] ? this.dataKeyNames[d] : d));
            this.tbody = this.table.append('tbody').attr('class', 'vcc-tbody');
            this.rows = this.tbody
                .selectAll('tr')
                .data(this.data)
                .enter()
                .append('tr')
                .attr('class', 'vcc-tr');
            this.cells = this.rows
                .selectAll('.vcc-td')
                .data(row => {
                return this.tableColumns.map(col => {
                    return {
                        column: col,
                        value: row[col]
                    };
                });
            })
                .enter()
                .append((_, i) => {
                const element = i ? 'td' : 'th';
                return document.createElement(element);
            })
                .attr('scope', (_, i) => (i ? null : 'row'))
                .html(d => d.value)
                .attr('class', 'vcc-td');
            // draw secondary data table
            if (this.secondaryData) {
                this.thead = this.secondaryTable
                    .append('thead')
                    .attr('class', 'vcc-thead')
                    .append('tr')
                    .attr('class', 'vcc-tr');
                // now add the secondary column headers to the table header
                this.thead
                    .selectAll('th')
                    .data(this.secondaryTableColumns)
                    .enter()
                    .append('th')
                    .attr('class', 'vcc-th')
                    .attr('scope', 'col')
                    .text(d => (this.dataKeyNames && this.dataKeyNames[d] ? this.dataKeyNames[d] : d));
                this.tbody = this.secondaryTable.append('tbody').attr('class', 'vcc-tbody');
                this.rows = this.tbody
                    .selectAll('tr')
                    .data(this.secondaryData)
                    .enter()
                    .append('tr')
                    .attr('class', 'vcc-tr');
                this.cells = this.rows
                    .selectAll('.vcc-td')
                    .data(row => {
                    return this.secondaryTableColumns.map(col => {
                        return {
                            column: col,
                            value: row[col]
                        };
                    });
                })
                    .enter()
                    .append((_, i) => {
                    const element = i ? 'td' : 'th';
                    return document.createElement(element);
                })
                    .attr('scope', (_, i) => (i ? null : 'row'))
                    .html(d => d.value)
                    .attr('class', 'vcc-td');
            }
        }
    }
    // using a similar workaround: https://github.com/Microsoft/TypeScript/issues/10761
    render() {
        const svgProps = { tabindex: -1 };
        const useProps = {
            href: `#visa-viz-view-grid--tiny-${this.uniqueID}`,
            xlinkHref: `#visa-viz-view-grid--tiny-${this.uniqueID}`
        };
        const symbolProps = { viewbox: '0 0 16 16' };
        return (h("div", { key: '3dacc5dc3c61b2349c465bc1245d1bee9afb86e0', class: "visa-viz-data-table-outer-container", "data-testid": this.unitTest ? 'data-table-outer-container' : null }, h("div", { key: 'afd7f9b079a16e12aaccd053a1c1e5702bcb8822', class: "visa-viz-button-wrapper", style: {
                // if we don't push the button up, we need to add padding to the bottom of it
                paddingBottom: `${this.padding.left + this.margin.left - 35 < 0 ? 32 : 0}px`
            } }, h("button", { key: '227e061be67e9e616c70c8422903095c6d004794', id: `visa-viz-data-table-button-${this.uniqueID}`, type: "button", class: "vcc-btn-icon vcc-btn-icon--light-tiny visa-viz-data-table-button", style: {
                // if we have enough room to the left, we push the button next to the chart, otherwise we put it below the chart
                transform: `translate(${this.padding.left +
                    this.margin.left -
                    (this.padding.left + this.margin.left - 35 < 0 ? 0 : 35)}px,
                ${this.padding.left + this.margin.left - 35 < 0 ? 0 : -40}px)`
            }, "aria-label": `${translate('dataTable.display', this.language)}`, "aria-expanded": this.showTable ? 'true' : 'false', role: "button", tabIndex: this.hideDataTable ? -1 : 0, onClick: () => (this.showTable = !this.showTable) }, h("svg", Object.assign({ key: '46be243608d30eb9473fd3215247e6270b68e4b2', class: "vcc-icon--tiny", focusable: "false" }, svgProps), h("use", Object.assign({ key: 'f288b5c4f6224375032105b554c5bab050e98ec9' }, useProps)))), h("svg", { key: 'a624a54d25fa0a6eb9cc06bd3f71db1fa57c99bc', class: "vcc-icons" }, h("symbol", Object.assign({ key: 'da37352f393f2e87a00928a6464ad6f5549ddef9', id: `visa-viz-view-grid--tiny-${this.uniqueID}` }, symbolProps), h("path", { key: '6a2a47edf0be87330990dc146b534aaeb42347d5', d: "M5,5 L5,2 L2,2 L2,5 L5,5 Z M5,7 L2,7 C0.894905844,7 0,6.1044757 0,5 L0,2 C0,0.8955243 0.894905844,3.55271368e-15 2,3.55271368e-15 L5,3.55271368e-15 C6.10509416,3.55271368e-15 7,0.8955243 7,2 L7,5 C7,6.1044757 6.10509416,7 5,7 Z M14,5 L14,2 L11,2 L11,5 L14,5 Z M14,7 L11,7 C9.89490584,7 9,6.1044757 9,5 L9,2 C9,0.8955243 9.89490584,3.55271368e-15 11,3.55271368e-15 L14,3.55271368e-15 C15.1050942,3.55271368e-15 16,0.8955243 16,2 L16,5 C16,6.1044757 15.1050942,7 14,7 Z M5,14 L5,11 L2,11 L2,14 L5,14 Z M5,16 L2,16 C0.894905844,16 0,15.1044757 0,14 L0,11 C0,9.8955243 0.894905844,9 2,9 L5,9 C6.10509416,9 7,9.8955243 7,11 L7,14 C7,15.1044757 6.10509416,16 5,16 Z M14,14 L14,11 L11,11 L11,14 L14,14 Z M14,16 L11,16 C9.89490584,16 9,15.1044757 9,14 L9,11 C9,9.8955243 9.89490584,9 11,9 L14,9 C15.1050942,9 16,9.8955243 16,11 L16,14 C16,15.1044757 15.1050942,16 14,16 Z" }), h("g", { key: '63c69b6ad2056167f17a1b32b55a0229505b5980', fill: "none", "fill-rule": "evenodd", stroke: "none", "stroke-width": "1" }, h("mask", { key: 'de9c7c4713cc846a164f7d68baf86cec48c3a2c8', fill: "#fff" }, h("use", { key: 'e06c9279b72635b402b50576d92d4dfff6e0b338', xlinkHref: "#path-1" })), h("use", { key: '031bec50fabf1f8c9e3aa53e07600bcbf922f72e', fill: "#000", "fill-rule": "nonzero", xlinkHref: "#path-1" }))))), h("div", { key: 'b516890b81f053ee622cdcf71138cd8079c790ec', id: `visa-viz-data-table-container-${this.uniqueID}`, class: "visa-viz-data-table-container", "data-testid": this.unitTest ? 'data-table-container' : null })));
    }
    init() {
        // reading properties
        const keys = Object.keys(DataTableDefaultValues);
        let i = 0;
        const exceptions = {};
        for (i = 0; i < keys.length; i++) {
            const exception = !exceptions[keys[i]] ? false : this[keys[i]] === exceptions[keys[i]].exception;
            this[keys[i]] = this[keys[i]] || exception ? this[keys[i]] : DataTableDefaultValues[keys[i]];
        }
    }
    static get is() { return "data-table"; }
    static get originalStyleUrls() {
        return {
            "$": ["data-table.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["data-table.css"]
        };
    }
    static get properties() {
        return {
            "uniqueID": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "unique-i-d",
                "reflect": false
            },
            "language": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "language",
                "reflect": false,
                "defaultValue": "DataTableDefaultValues.language"
            },
            "isCompact": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "is-compact",
                "reflect": false,
                "defaultValue": "DataTableDefaultValues.isCompact"
            },
            "hideDataTable": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "hide-data-table",
                "reflect": false,
                "defaultValue": "DataTableDefaultValues.hideDataTable"
            },
            "margin": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "IBoxModelType",
                    "resolved": "IBoxModelType",
                    "references": {
                        "IBoxModelType": {
                            "location": "import",
                            "path": "@visa/charts-types",
                            "id": "../types/dist/index.d.ts::IBoxModelType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "defaultValue": "DataTableDefaultValues.margin"
            },
            "padding": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "IBoxModelType",
                    "resolved": "IBoxModelType",
                    "references": {
                        "IBoxModelType": {
                            "location": "import",
                            "path": "@visa/charts-types",
                            "id": "../types/dist/index.d.ts::IBoxModelType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "defaultValue": "DataTableDefaultValues.padding"
            },
            "tableColumns": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "string[]",
                    "resolved": "string[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "secondaryTableColumns": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "string[]",
                    "resolved": "string[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "dataKeyNames": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "object",
                    "resolved": "object",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "data": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "object[]",
                    "resolved": "object[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "secondaryData": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "object[]",
                    "resolved": "object[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "unitTest": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "unit-test",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "showTable": {}
        };
    }
    static get elementRef() { return "dataTableEl"; }
}
// incorporate OSS licenses into build
window['VisaChartsLibOSSLicenses'] = getLicenses(); // tslint:disable-line no-string-literal
//# sourceMappingURL=data-table.js.map
