/**
 * Copyright (c) 2020, 2021, 2022, 2023 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
import { EventEmitter } from '../../stencil-public-runtime';
import { IBoxModelType, ILocalizationType, IHoverStyleType, IClickStyleType, IAxisType, IDataLabelType, ITooltipLabelType, IAccessibilityType, IAnimationConfig, ILegendType, ISubTitleType } from '@visa/charts-types';
import 'd3-transition';
export declare class HeatMap {
    clickEvent: EventEmitter;
    hoverEvent: EventEmitter;
    mouseOutEvent: EventEmitter;
    initialLoadEvent: EventEmitter;
    initialLoadEndEvent: EventEmitter;
    drawStartEvent: EventEmitter;
    drawEndEvent: EventEmitter;
    transitionEndEvent: EventEmitter;
    localization: ILocalizationType;
    mainTitle: string;
    subTitle: string | ISubTitleType;
    height: number;
    width: number;
    highestHeadingLevel: string | number;
    margin: IBoxModelType;
    padding: IBoxModelType;
    data: object[];
    uniqueID: string;
    xAccessor: string;
    yAccessor: string;
    valueAccessor: string;
    xKeyOrder: string[];
    yKeyOrder: string[];
    xAxis: IAxisType;
    yAxis: IAxisType;
    wrapLabel: boolean;
    hideAxisPath: boolean;
    colorPalette: string;
    colors: string[];
    colorSteps: number;
    hoverStyle: IHoverStyleType;
    clickStyle: IClickStyleType;
    cursor: string;
    shape: string;
    hoverOpacity: number;
    animationConfig: IAnimationConfig;
    strokeWidth: number;
    dataLabel: IDataLabelType;
    dataKeyNames: object;
    showTooltip: boolean;
    tooltipLabel: ITooltipLabelType;
    accessibility: IAccessibilityType;
    legend: ILegendType;
    annotations: object[];
    maxValueOverride: number;
    minValueOverride: number;
    hoverHighlight: object;
    clickHighlight: object[];
    interactionKeys: string[];
    suppressEvents: boolean;
    unitTest: boolean;
    heatMapEl: HTMLElement;
    shouldValidateAccessibility: boolean;
    shouldValidateLocalization: boolean;
    svg: any;
    root: any;
    rootG: any;
    tooltipG: any;
    subTitleG: any;
    map: any;
    row: any;
    labelG: any;
    labels: any;
    defaults: boolean;
    current: any;
    enter: any;
    exit: any;
    update: any;
    enterRowWrappers: any;
    updateRowWrappers: any;
    exitRowWrappers: any;
    enteringLabelGroups: any;
    exitingLabelGroups: any;
    updatingLabelGroups: any;
    enterLabels: any;
    updateLabels: any;
    exitLabels: any;
    heat: any;
    rawHeat: any;
    fillColors: any;
    strokeColors: any;
    y: any;
    x: any;
    innerHeight: number;
    innerWidth: number;
    innerPaddedHeight: number;
    innerPaddedWidth: number;
    nest: any;
    datakeys: any;
    colorArr: any;
    preparedColors: any;
    duration: number;
    legendG: any;
    preppedData: any;
    interpolating: any;
    tableData: any;
    tableColumns: any;
    updateCheck: any;
    updated: boolean;
    enterSize: number;
    exitSize: number;
    chartID: string;
    xAxisElement: any;
    innerInteractionKeys: any;
    shouldValidate: boolean;
    shouldUpdateData: boolean;
    shouldSetDimensions: boolean;
    shouldUpdateTableData: boolean;
    shouldUpdateScales: boolean;
    shouldResetRoot: boolean;
    shouldSetColors: boolean;
    shouldSetSubTitle: boolean;
    shouldValidateInteractionKeys: boolean;
    shouldFormatClickHighlight: boolean;
    shouldFormatHoverHighlight: boolean;
    shouldUpdateAnnotations: boolean;
    shouldUpdateXAxis: boolean;
    shouldUpdateYAxis: boolean;
    shouldSetGlobalSelections: boolean;
    shouldSetTestingAttributes: boolean;
    shouldEnterUpdateExit: boolean;
    shouldUpdateGeometries: boolean;
    shouldSetSelectionClass: boolean;
    shouldDrawInteractionState: boolean;
    shouldUpdateLegend: boolean;
    shouldUpdateCursor: boolean;
    shouldBindInteractivity: boolean;
    shouldUpdateLabels: boolean;
    shouldSetLabelOpacity: boolean;
    shouldSwapXAxis: boolean;
    shouldSwapYAxis: boolean;
    shouldUpdateDescriptionWrapper: boolean;
    shouldSetChartAccessibilityTitle: boolean;
    shouldSetChartAccessibilitySubtitle: boolean;
    shouldSetChartAccessibilityLongDescription: boolean;
    shouldSetChartAccessibilityExecutiveSummary: boolean;
    shouldSetChartAccessibilityStatisticalNotes: boolean;
    shouldSetChartAccessibilityStructureNotes: boolean;
    shouldSetParentSVGAccessibility: boolean;
    shouldSetGeometryAccessibilityAttributes: boolean;
    shouldSetGeometryAriaLabels: boolean;
    shouldSetGroupAccessibilityLabel: boolean;
    shouldSetChartAccessibilityPurpose: boolean;
    shouldSetChartAccessibilityContext: boolean;
    shouldRedrawWrapper: boolean;
    shouldSetTagLevels: boolean;
    shouldSetChartAccessibilityCount: boolean;
    shouldSetYAxisAccessibility: boolean;
    shouldSetXAxisAccessibility: boolean;
    shouldSetAnnotationAccessibility: boolean;
    shouldSetTextures: boolean;
    shouldSetStrokes: boolean;
    shouldSetLocalizationConfig: boolean;
    strokes: any;
    topLevel: string;
    bottomLevel: string;
    dataWatcher(_newData: any, _oldData: any): void;
    idWatcher(newID: any, _oldID: any): void;
    headingWatcher(_newVal: any, _oldVal: any): void;
    titleWatcher(_newVal: any, _oldVal: any): void;
    subtitleWatcher(_newVal: any, _oldVal: any): void;
    layoutWatcher(_newVal: any, _oldVal: any): void;
    xAccessorWatcher(_newVal: any, _oldVal: any): void;
    yAccessorWatcher(_newVal: any, _oldVal: any): void;
    groupAccessorWatcher(_newVal: any, _oldVal: any): void;
    xKeyOrderWatcher(_newVal: any, _oldVal: any): void;
    yKeyOrderWatcher(_newVal: any, _oldVal: any): void;
    xAxisWatcher(_newVal: any, _oldVal: any): void;
    yAxisWatcher(_newVal: any, _oldVal: any): void;
    wrapLabelWatcher(_newVal: any, _oldVal: any): void;
    hideAxisPathWatcher(_newVal: any, _oldVal: any): void;
    colorsWatcher(_newVal: any, _oldVal: any): void;
    hoverStyleWatcher(_newVal: any, _oldVal: any): void;
    clickStyleWatcher(_newVal: any, _oldVal: any): void;
    shapeWatcher(_newVal: any, _oldVal: any): void;
    cursorWatcher(_newVal: any, _oldVal: any): void;
    strokeWidthWatcher(_newVal: any, _oldVal: any): void;
    hoverOpacityWatcher(_newVal: any, _oldVal: any): void;
    labelWatcher(_newVal: any, _oldVal: any): void;
    showTooltipWatcher(_newVal: any, _oldVal: any): void;
    tooltipLabelWatcher(_newVal: any, _oldVal: any): void;
    legendWatcher(_newVal: any, _oldVal: any): void;
    suppressWatcher(_newVal: any, _oldVal: any): void;
    annotationsWatcher(_newVal: any, _oldVal: any): void;
    accessibilityWatcher(_newVal: any, _oldVal: any): void;
    localizationWatcher(_newVal: any, _oldVal: any): void;
    valueOverrideWatcher(_newVal: any, _oldVal: any): void;
    clickWatcher(_newVal: any, _oldVal: any): void;
    hoverWatcher(_newVal: any, _oldVal: any): void;
    interactionWatcher(_newVal: any, _oldVal: any): void;
    dataKeyNamesWatcher(_newVal: any, _oldVal: any): void;
    unitTestWatcher(_newVal: any, _oldVal: any): void;
    componentWillLoad(): Promise<unknown>;
    componentWillUpdate(): Promise<unknown>;
    componentDidLoad(): Promise<CustomEvent<any>>;
    componentDidUpdate(): Promise<CustomEvent<any>>;
    shouldValidateLocalizationProps(): void;
    shouldValidateAccessibilityProps(): void;
    formatClickHighlight(): void;
    formatHoverHighlight(): void;
    getLanguageString(): any;
    setLocalizationConfig(): void;
    setDimensions(): void;
    validateInteractionKeys(): void;
    prepareScales(): void;
    setSubTitleElements(): void;
    setColors(): void;
    setTextures(): void;
    setStrokes(): void;
    setTableData(): void;
    prepareData(): void;
    reSetRoot(): void;
    drawXAxis(swapping?: boolean): void;
    drawYAxis(swapping?: boolean): void;
    setXAxisAccessibility(): void;
    setYAxisAccessibility(): void;
    renderRootElements(): void;
    setGlobalSelections(): void;
    setTestingAttributes(): void;
    enterGeometries(): void;
    updateGeometries(): void;
    exitGeometries(): void;
    drawGeometries(): void;
    updateInteractionState(): void;
    setLabelOpacity(): void;
    processLabelOpacity(selection: any, isATransition?: any): void;
    textTreatmentHandler: (d: any, i: any, n: any) => any;
    setSelectedClass(): void;
    updateCursor(): void;
    bindInteractivity(): void;
    enterDataLabels(): void;
    updateDataLabels(): void;
    exitDataLabels(): void;
    drawDataLabels(): void;
    drawLegendElements(): void;
    drawAnnotations(): void;
    setAnnotationAccessibility(): void;
    setTagLevels(): void;
    setChartDescriptionWrapper(): void;
    setParentSVGAccessibility(): void;
    setGeometryAccessibilityAttributes(): void;
    setGeometryAriaLabels(): void;
    setGroupAccessibilityID(): void;
    setChartAccessibilityTitle(): void;
    setChartAccessibilitySubtitle(): void;
    setChartAccessibilityLongDescription(): void;
    setChartAccessibilityExecutiveSummary(): void;
    setChartAccessibilityPurpose(): void;
    setChartAccessibilityContext(): void;
    setChartAccessibilityStatisticalNotes(): void;
    setChartCountAccessibility(): void;
    setChartAccessibilityStructureNotes(): void;
    onChangeHandler(): void;
    onClickHandler(d: any, n: any): void;
    onHoverHandler(d: any, n: any): void;
    onMouseOutHandler(): void;
    setTooltipInitialStyle(): void;
    eventsTooltip({ data, evt, isToShow }: {
        data?: any;
        evt?: any;
        isToShow: boolean;
    }): void;
    render(): any;
    private init;
}
