{"version":3,"names":["propDefaultValues","Utils","BarChartDefaultValues","mainTitle","subTitle","text","height","width","margin","top","bottom","right","left","padding","localization","ordinalAccessor","valueAccessor","groupAccessor","highestHeadingLevel","layout","accessibility","animationConfig","sortOrder","xAxis","xAxisBarChart","yAxis","yAxisBarChart","wrapLabel","colorPalette","colorPaletteSingle","hoverStyle","clickStyle","referenceStyle","cursor","roundedCorner","barIntervalRatio","hoverOpacity","dataLabel","dataLabelBar","legend","categoryLegend","tooltipLabel","showTooltip","suppressEvents","referenceLines","annotations","clickHighlight","barChartCss","BarChartStyle0","getGlobalInstances","configLocalization","getActiveLanguageString","prepareStrokeColorsFromScheme","calculateLuminance","verifyTextHasSpace","checkAttributeTransitions","createTextStrokeFilter","drawHoverStrokes","removeHoverStrokes","buildStrokes","convertColorsToTextures","initializeElementAccess","initializeDescriptionRoot","setElementFocusHandler","setElementAccessID","setAccessibilityController","hideNonessentialGroups","setAccessTitle","setAccessSubtitle","setAccessLongDescription","setAccessExecutiveSummary","setAccessPurpose","setAccessContext","setAccessStatistics","setAccessChartCounts","setAccessXAxis","setAccessYAxis","setAccessStructure","setAccessAnnotation","retainAccessFocus","checkAccessFocus","setElementInteractionAccessState","setAccessibilityDescriptionWidth","autoTextColor","annotate","chartAccessors","checkInteraction","checkClicked","checkHovered","checkLabelDisplayOnly","convertVisaColor","drawAxis","drawGrid","drawLegend","setSubTitle","setReferenceLine","setLegendInteractionState","drawTooltip","formatDataLabel","getColors","getLicenses","getPadding","getScopedData","initTooltipStyle","placeDataLabels","overrideTitleTooltip","transitionEndAll","scopeDataKeys","visaColors","validateAccessibilityProps","validateLocalizationProps","findTagLevel","prepareRenderChange","roundTo","resolveLabelCollision","halve","BarChart","this","shouldValidateAccessibility","shouldValidateLocalization","updated","shouldUpdateXAxis","shouldUpdateYAxis","shouldUpdateXGrid","shouldUpdateYGrid","shouldValidate","shouldUpdateData","shouldUpdateLayoutVariables","shouldUpdateScales","shouldUpdateTableData","shouldUpdateAnnotations","shouldDrawInteractionState","shouldValidateClickStyle","shouldValidateHoverStyle","shouldSetSelectionClass","shouldUpdateCursor","shouldSetColors","shouldSetSubTitle","shouldUpdateGeometries","shouldUpdateLegend","shouldUpdateReferenceLines","shouldBindInteractivity","shouldUpdateLegendInteractivity","shouldResetRoot","shouldUpdateBaseline","shouldValidateInteractionKeys","shouldUpdateLabelData","shouldUpdateLegendData","shouldCheckValueAxis","shouldCheckLabelAxis","shouldUpdateCorners","shouldEnterUpdateExit","shouldSetGlobalSelections","shouldSetTestingAttributes","shouldValidateLabelPlacement","shouldValidateDataLabelAccessor","shouldCheckLabelColor","shouldSetLabelOpacity","shouldSetLabelPosition","shouldSetLabelContent","shouldUpdateDescriptionWrapper","shouldSetChartAccessibilityTitle","shouldSetChartAccessibilitySubtitle","shouldSetChartAccessibilityLongDescription","shouldSetChartAccessibilityExecutiveSummary","shouldSetChartAccessibilityStatisticalNotes","shouldSetChartAccessibilityStructureNotes","shouldSetParentSVGAccessibility","shouldSetGeometryAccessibilityAttributes","shouldSetGeometryAriaLabels","shouldSetGroupAccessibilityAttributes","shouldSetGroupAccessibilityLabel","shouldSetChartAccessibilityPurpose","shouldSetChartAccessibilityContext","shouldSetLegendCursor","shouldRedrawWrapper","shouldSetTagLevels","shouldSetChartAccessibilityCount","shouldSetYAxisAccessibility","shouldSetXAxisAccessibility","shouldSetAnnotationAccessibility","shouldSetStrokes","shouldSetTextures","shouldSetLocalizationConfig","topLevel","bottomLevel","strokes","textTreatmentHandler","d","i","n","colorsArray","preparedColors","range","scheme","length","includes","colorScale","hideTextures","showExperimentalTextures","bgColor","innerInteractionKeys","innerClickStyle","color","hoverHighlight","innerHoverStyle","me","select","autoPlacementBackgroundColor","placement","collisionPlacement","attr","y","dark_text","classed","root","svg","node","id","chartID","dataWatcher","_newVal","_oldVal","sortWatcher","groupAccessorWatcher","interactionKeys","ordinalAccessorWatcher","valueAccessorWatcher","valueOverrideWatcher","headingWatcher","titleWatcher","subtitleWatcher","xAxisWatcher","newGridVal","gridVisible","oldGridVal","newTickInterval","tickInterval","oldTickInterval","newCenterBaseline","centerBaseline","oldCenterBaseline","yAxisWatcher","wrapLabelWatcher","colorsWatcher","layoutWatcher","dimensionWatcher","cornerWatcher","intervalRatioWatcher","labelWatcher","newPlacementVal","oldPlacementVal","newCollisionPlacementVal","oldCollisionPlacementVal","newVisibleVal","visible","oldVisibleVal","newAccessor","labelAccessor","oldAccessor","newFormatVal","format","oldFormatVal","newCollisionHideOnlyVal","collisionHideOnly","oldCollisionHideOnlyVal","newDisplayOnlyVal","displayOnly","oldDisplayOnlyVal","legendWatcher","newInteractiveVal","interactive","oldInteractiveVal","tooltipLabelWatcher","showTooltipWatcher","hoverOpacityWatcher","clickStyleWatcher","hoverStyleWatcher","clickWatcher","hoverWatcher","interactionWatcher","dataKeyNamesWatcher","cursorWatcher","accessibilityWatcher","newTitle","title","oldTitle","newExecutiveSummary","executiveSummary","oldExecutiveSummary","newPurpose","purpose","oldPurpose","newLongDescription","longDescription","oldLongDescription","newContext","contextExplanation","oldContext","newStatisticalNotes","statisticalNotes","oldStatisticalNotes","newStructureNotes","structureNotes","oldStructureNotes","newincludeDataKeyNames","includeDataKeyNames","oldincludeDataKeyNames","newElementDescriptionAccessor","elementDescriptionAccessor","oldElementDescriptionAccessor","newTextures","oldTextures","newExTextures","oldExTextures","newSmallValue","showSmallLabels","oldSmallValue","newStrokes","hideStrokes","oldStrokes","newKeyNav","keyboardNavConfig","disabled","oldKeyNav","newInterface","elementsAreInterface","oldInterface","referenceLinesWatcher","annotationsWatcher","localizationWatcher","newLanguage","language","oldLanguage","newNumeralLocale","numeralLocale","oldNumeralLocale","idWatcher","newVal","console","error","suppressWatcher","unitTestWatcher","componentWillLoad","uniqueID","uuid","initialLoadEvent","emit","Promise","resolve","duration","defaults","barChartEl","setLocalizationConfig","setTagLevels","prepareData","prepareLegendData","prepareLabelData","updateChartVariable","prepareScales","validateInteractionKeys","setTableData","shouldValidateAccessibilityProps","shouldValidateLocalizationProps","validateClickStyle","validateHoverStyle","setColors","componentWillUpdate","componentDidLoad","renderRootElements","setTooltipInitialStyle","setChartDescriptionWrapper","setChartAccessibilityTitle","setChartAccessibilitySubtitle","setChartAccessibilityLongDescription","setChartAccessibilityExecutiveSummary","setChartAccessibilityPurpose","setChartAccessibilityContext","setChartAccessibilityStatisticalNotes","setChartAccessibilityStructureNotes","setParentSVGAccessibility","reSetRoot","setTextures","setStrokes","setSubTitleElements","drawXGrid","drawYGrid","setGlobalSelections","setTestingAttributes","validateDataLabelAccessor","enterGeometries","updateGeometries","exitGeometries","enterLabels","updateLabels","exitLabels","drawGeometries","setChartCountAccessibility","setGeometryAccessibilityAttributes","setGeometryAriaLabels","setRoundedCorners","drawLegendElements","validateLabelPlacement","setLabelContent","processLabelPosition","updatingLabels","drawReferenceLines","setSelectedClass","checkLabelColorAgainstBackground","updateCursor","bindInteractivity","bindLegendInteractivity","drawXAxis","setXAxisAccessibility","drawYAxis","setYAxisAccessibility","drawAnnotations","setAnnotationAccessibility","drawBaseline","onChangeHandler","bars","setGroupAccessibilityAttributes","setGroupAccessibilityID","then","initialLoadEndEvent","componentDidUpdate","setLabelPosition","updateInteractionState","setLabelOpacity","setLegendCursor","drawEndEvent","windowInstances","languageString","i18Next","languageObject","getResourceBundle","numeralObject","numeral","localeData","skipValidation","Object","assign","disableValidation","data","context","onClickEvent","undefined","clickEvent","innerLabelAccessor","getLanguageString","innerHeight","innerWidth","innerPaddedHeight","innerPaddedWidth","preppedData","sort","a","b","parseFloat","map","nested","nest","key","entries","legendData","forEach","el","push","values","minIdx","minIndex","minItem","maxIdx","maxIndex","maxItem","firstItem","find","val","lastItem","reverse","displayOnlyLabelData","first","last","min","max","subTitleG","colorFromProps","colors","minValue","maxValue","scaleOrdinal","domain","strokeColors","backgroundColors","half","Math","ceil","isDiverging","isDark","colorsMatchingScheme","fillLuminance","fillColor","strokeLuminance","textureColor","darkerColor","lighterColor","fillColors","copy","colorArr","textures","rootSVG","disableTransitions","strokeOverride","keys","tableData","tableColumns","shouldCenterBaseline","minBarValue","maxValueOverride","minValueOverride","maxBarValue","scaleLinear","x","scaleBand","changeSvg","selection","namespace","easing","easeCircleIn","changeRoot","changeRootG","rootG","checkHideAxisState","axisName","relevantLayout","axisAccessor","axisLabel","label","dataKeyNames","axisScale","dateFormat","hide","markOffset","rootEle","hasXAxis","xAxisLabel","hasYAxis","yAxisLabel","gridG","enter","interrupt","ordinalAxis","ordinalDimension","innerPaddedOrdinalDimension","toUpperCase","substring","valueAxis","valueDimension","choice","on","onClickHandler","onHoverHandler","onMouseOutHandler","abs","each","_d","bandwidth","shift","update","order","transition","ease","exit","axisOfShift","dimensionOfShift","innerPaddedDimension","self","call","focusDidExist","remove","parentGNode","geometryIsUpdating","numeric","newValue","transitionEndEvent","dataBoundToGeometries","selectAll","append","merge","exitSize","size","enterSize","dataBoundToLabels","labels","enteringLabels","exitingLabels","unitTest","legendG","tooltipG","referencesG","strokeWidth","clicked","hovered","baseColor","state","inputElement","fill","addCollisionClass","hideOnly","processLabelOpacity","labelsAdded","filter","_","labelsRemoved","bitmaps","labelSelection","avoidMarks","validPositions","offsets","accessors","removeOnly","fullBandwidth","prevOpacity","styleVisibility","style","dimensions","hasRoom","fontSize","targetOpacity","selected","selectable","Number","EPSILON","enterTransition","enteringOnly","updatingOnly","runTransition","redrawBitmap","suppressMarkDraw","textHeight","collisionSettings","vertical","middle","horizontal","boundsScope","textElement","getComputedStyle","changeLabels","xScale","yScale","labelOffset","chartType","avoidCollision","runOccupancyBitmap","groupName","baseColorArr","type","labelKey","source","xAccessor","yAccessor","chartTag","redraw","disableKeyNav","hideDataTable","hideDataTableButton","description","geomType","includeKeyNames","dataKeys","onChangeFunc","added","removed","target","isLegend","hoverEvent","eventsTooltip","evt","event","isToShow","mouseOutEvent","render","drawStartEvent","theme","init","h","class","display","isInteractive","hasCousinNavigation","isCompact","exceptions","exception","window"],"sources":["src/components/bar-chart/bar-chart-default-values.ts","src/components/bar-chart/bar-chart.scss?tag=bar-chart","src/components/bar-chart/bar-chart.tsx"],"sourcesContent":["/**\n * Copyright (c) 2020, 2021, 2022, 2023, 2024 Visa, Inc.\n *\n * This source code is licensed under the MIT license\n * https://github.com/visa/visa-chart-components/blob/master/LICENSE\n *\n **/\nimport Utils from '@visa/visa-charts-utils';\n\nconst { propDefaultValues } = Utils;\n\nexport class BarChartDefaultValues {\n  static readonly mainTitle = 'This is bar chart title';\n  static readonly subTitle = propDefaultValues.subTitle.text;\n  static readonly height = 325;\n  static readonly width = 675;\n  static readonly margin = {\n    top: 325 * 0.01,\n    bottom: 325 * 0.01,\n    right: 675 * 0.01,\n    left: 675 * 0.01\n  };\n  static readonly padding = {\n    top: 20,\n    bottom: 50,\n    right: 60,\n    left: 60\n  };\n\n  static readonly localization = propDefaultValues.localization;\n\n  static readonly ordinalAccessor = 'label';\n  static readonly valueAccessor = 'value';\n  static readonly groupAccessor = '';\n\n  static readonly highestHeadingLevel = propDefaultValues.highestHeadingLevel;\n  static readonly layout = propDefaultValues.layout;\n  static readonly accessibility = propDefaultValues.accessibility;\n  static readonly animationConfig = propDefaultValues.animationConfig;\n  static readonly sortOrder = propDefaultValues.sortOrder;\n  static readonly xAxis = propDefaultValues.xAxisBarChart;\n\n  static readonly yAxis = propDefaultValues.yAxisBarChart;\n  static readonly wrapLabel = propDefaultValues.wrapLabel;\n  static readonly colorPalette = propDefaultValues.colorPaletteSingle;\n\n  static readonly hoverStyle = propDefaultValues.hoverStyle;\n  static readonly clickStyle = propDefaultValues.clickStyle;\n\n  static readonly referenceStyle = propDefaultValues.referenceStyle;\n  static readonly cursor = propDefaultValues.cursor;\n  static readonly roundedCorner = propDefaultValues.roundedCorner;\n  static readonly barIntervalRatio = propDefaultValues.barIntervalRatio;\n  static readonly hoverOpacity = propDefaultValues.hoverOpacity;\n\n  static readonly dataLabel = propDefaultValues.dataLabelBar;\n  static readonly dataKeyNames;\n  static readonly legend = propDefaultValues.categoryLegend;\n  static readonly tooltipLabel = propDefaultValues.tooltipLabel;\n\n  static readonly showTooltip = propDefaultValues.showTooltip;\n  static readonly suppressEvents = propDefaultValues.suppressEvents;\n  static readonly referenceLines = propDefaultValues.referenceLines;\n  static readonly annotations = propDefaultValues.annotations;\n\n  static readonly hoverHighlight;\n  static readonly clickHighlight = propDefaultValues.clickHighlight;\n}\n","/**\n * Copyright (c) 2020, 2021, 2023, 2024 Visa, Inc.\n *\n * This source code is licensed under the MIT license\n * https://github.com/visa/visa-chart-components/blob/master/LICENSE\n *\n **/\nbar-chart {\n  .annotations {\n    pointer-events: none;\n    .handle {\n      pointer-events: all;\n    }\n  }\n\n  .screen-reader-info {\n    position: absolute;\n    left: -9999px;\n    top: auto;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n  }\n\n  .data-table-link {\n    color: #767676;\n    text-decoration: none;\n    font-size: 12px;\n    margin-left: 5%;\n  }\n\n  .hidden {\n    display: none;\n  }\n\n  cursor: default;\n  .light {\n    .grid {\n      line {\n        stroke: #c9c9c9;\n        stroke-opacity: 1;\n        stroke-width: 0.8;\n        // shape-rendering: crispEdges;\n        // stroke-dasharray: 4, 4;\n      }\n      path {\n        stroke-width: 0;\n      }\n    }\n    .axis {\n      font-size: 12px;\n      .tick {\n        text {\n          fill: #767676;\n        }\n        line {\n          stroke: #767676;\n        }\n      }\n\n      &-label {\n        // axis label\n        text-anchor: middle;\n        font: 1rem sans-serif;\n      }\n      &-mark {\n        // axis mark\n        color: #949494;\n        stroke-width: 2px;\n      }\n    }\n\n    .y.axis {\n      path {\n        stroke: #767676;\n        opacity: 0;\n      }\n    }\n    .x.axis {\n      path {\n        stroke: transparent;\n      }\n    }\n\n    .o-layout--chart {\n      .bar-dataLabel-vertical {\n        // fill: #767676;\n        text-anchor: middle;\n      }\n      .bar-dataLabel-horizontal {\n        // fill: #767676;\n        text-anchor: start;\n      }\n    }\n  }\n  .dark {\n    .grid {\n      line {\n        stroke: lightgrey;\n        stroke-opacity: 0.7;\n        shape-rendering: crispEdges;\n      }\n      path {\n        stroke-width: 0;\n      }\n    }\n    .axis {\n      font-size: 12px;\n      .tick {\n        line {\n          stroke: lightgrey;\n        }\n        text {\n          fill: grey;\n        }\n      }\n      path {\n        stroke: black;\n      }\n\n      &-label {\n        text-anchor: middle;\n        font: 1rem sans-serif;\n      }\n    }\n    .o-layout--chart svg {\n      background: black;\n      .bar-dataLabel-vertical {\n        text-anchor: middle;\n      }\n      .bar-dataLabel-horizontal {\n        text-anchor: start;\n      }\n    }\n  }\n\n  //TBD: add color based on scheme\n  // .r.axis circle {\n  //   stroke: #cccccc;\n  //   stroke-width: 1px;\n  //   fill: none;\n  // }\n\n  //Text alignment, not impacted by color theme\n  // .a.axis text {\n  //   text-anchor: middle;\n  //   font-size: 10pt;\n  // }\n  //\n  // .r.axis text {\n  //   text-anchor: end;\n  //   font-size: 8pt;\n  // }\n}\n","/**\n * Copyright (c) 2020, 2021, 2022, 2023, 2024 Visa, Inc.\n *\n * This source code is licensed under the MIT license\n * https://github.com/visa/visa-chart-components/blob/master/LICENSE\n *\n **/\nimport { Component, Element, Prop, Watch, h, Event, EventEmitter } from '@stencil/core';\nimport { select, event } from 'd3-selection';\nimport { max, min, minIndex, maxIndex } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal } from 'd3-scale';\nimport { easeCircleIn } from 'd3-ease';\nimport { nest } from 'd3-collection';\nimport {\n  IBoxModelType,\n  ILocalizationType,\n  IHoverStyleType,\n  IClickStyleType,\n  IAxisType,\n  IReferenceStyleType,\n  IDataLabelType,\n  ITooltipLabelType,\n  IAccessibilityType,\n  IAnimationConfig,\n  ILegendType,\n  ISubTitleType\n} from '@visa/charts-types';\nimport { BarChartDefaultValues } from './bar-chart-default-values';\nimport { v4 as uuid } from 'uuid';\nimport 'd3-transition';\nimport Utils from '@visa/visa-charts-utils';\n\nconst {\n  getGlobalInstances,\n  configLocalization,\n  getActiveLanguageString,\n  prepareStrokeColorsFromScheme,\n  calculateLuminance,\n  verifyTextHasSpace,\n  checkAttributeTransitions,\n  createTextStrokeFilter,\n  drawHoverStrokes,\n  removeHoverStrokes,\n  buildStrokes,\n  convertColorsToTextures,\n  initializeElementAccess,\n  initializeDescriptionRoot,\n  setElementFocusHandler,\n  setElementAccessID,\n  setAccessibilityController,\n  hideNonessentialGroups,\n  setAccessTitle,\n  setAccessSubtitle,\n  setAccessLongDescription,\n  setAccessExecutiveSummary,\n  setAccessPurpose,\n  setAccessContext,\n  setAccessStatistics,\n  setAccessChartCounts,\n  setAccessXAxis,\n  setAccessYAxis,\n  setAccessStructure,\n  setAccessAnnotation,\n  retainAccessFocus,\n  checkAccessFocus,\n  setElementInteractionAccessState,\n  setAccessibilityDescriptionWidth,\n  autoTextColor,\n  annotate,\n  chartAccessors,\n  checkInteraction,\n  checkClicked,\n  checkHovered,\n  checkLabelDisplayOnly,\n  convertVisaColor,\n  drawAxis,\n  drawGrid,\n  drawLegend,\n  setSubTitle,\n  setReferenceLine,\n  setLegendInteractionState,\n  drawTooltip,\n  formatDataLabel,\n  getColors,\n  getLicenses,\n  getPadding,\n  getScopedData,\n  initTooltipStyle,\n  placeDataLabels,\n  overrideTitleTooltip,\n  transitionEndAll,\n  scopeDataKeys,\n  visaColors,\n  validateAccessibilityProps,\n  validateLocalizationProps,\n  findTagLevel,\n  prepareRenderChange,\n  roundTo,\n  resolveLabelCollision,\n  halve\n} = Utils;\n\n@Component({\n  tag: 'bar-chart',\n  styleUrl: 'bar-chart.scss'\n})\nexport class BarChart {\n  @Event() clickEvent: EventEmitter;\n  @Event() hoverEvent: EventEmitter;\n  @Event() mouseOutEvent: EventEmitter;\n  @Event() initialLoadEvent: EventEmitter;\n  @Event() initialLoadEndEvent: EventEmitter;\n  @Event() drawStartEvent: EventEmitter;\n  @Event() drawEndEvent: EventEmitter;\n  @Event() transitionEndEvent: EventEmitter;\n\n  // Chart Attributes (1/7)\n  @Prop({ mutable: true }) localization: ILocalizationType = BarChartDefaultValues.localization;\n  @Prop({ mutable: true }) mainTitle: string = BarChartDefaultValues.mainTitle;\n  @Prop({ mutable: true }) subTitle: string | ISubTitleType = BarChartDefaultValues.subTitle;\n  @Prop({ mutable: true }) height: number = BarChartDefaultValues.height;\n  @Prop({ mutable: true }) width: number = BarChartDefaultValues.width;\n  @Prop({ mutable: true }) layout: string = BarChartDefaultValues.layout;\n  @Prop({ mutable: true }) highestHeadingLevel: string | number = BarChartDefaultValues.highestHeadingLevel;\n\n  @Prop({ mutable: true }) margin: IBoxModelType = BarChartDefaultValues.margin;\n  @Prop({ mutable: true }) padding: IBoxModelType = BarChartDefaultValues.padding;\n\n  // Data (2/6)\n  @Prop() data: object[];\n  @Prop() uniqueID: string;\n  @Prop({ mutable: true }) ordinalAccessor: string = BarChartDefaultValues.ordinalAccessor;\n  @Prop({ mutable: true }) valueAccessor: string = BarChartDefaultValues.valueAccessor;\n  @Prop({ mutable: true }) groupAccessor: string = BarChartDefaultValues.groupAccessor;\n  @Prop({ mutable: true }) sortOrder: string = BarChartDefaultValues.sortOrder;\n\n  // Axis (3/3)\n  @Prop({ mutable: true }) xAxis: IAxisType = BarChartDefaultValues.xAxis;\n  @Prop({ mutable: true }) yAxis: IAxisType = BarChartDefaultValues.yAxis;\n  @Prop({ mutable: true }) wrapLabel: boolean = BarChartDefaultValues.wrapLabel;\n\n  // Color & Shape (4/10)\n  @Prop({ mutable: true }) colorPalette: string = BarChartDefaultValues.colorPalette;\n  @Prop({ mutable: true }) colors: string[];\n  @Prop({ mutable: true }) hoverStyle: IHoverStyleType = BarChartDefaultValues.hoverStyle;\n  @Prop({ mutable: true }) clickStyle: IClickStyleType = BarChartDefaultValues.clickStyle;\n  @Prop({ mutable: true }) referenceStyle: IReferenceStyleType = BarChartDefaultValues.referenceStyle;\n  @Prop({ mutable: true }) cursor: string = BarChartDefaultValues.cursor;\n  @Prop({ mutable: true }) roundedCorner: number = BarChartDefaultValues.roundedCorner;\n  @Prop({ mutable: true }) barIntervalRatio: number = BarChartDefaultValues.barIntervalRatio;\n  @Prop({ mutable: true }) hoverOpacity: number = BarChartDefaultValues.hoverOpacity;\n  @Prop({ mutable: true }) animationConfig: IAnimationConfig = BarChartDefaultValues.animationConfig;\n\n  // Data label (5/7)\n  @Prop({ mutable: true }) dataLabel: IDataLabelType = BarChartDefaultValues.dataLabel;\n  @Prop({ mutable: true }) dataKeyNames: object;\n  @Prop({ mutable: true }) showTooltip: boolean = BarChartDefaultValues.showTooltip;\n  @Prop({ mutable: true }) tooltipLabel: ITooltipLabelType = BarChartDefaultValues.tooltipLabel;\n  @Prop({ mutable: true }) accessibility: IAccessibilityType = BarChartDefaultValues.accessibility;\n  @Prop({ mutable: true }) legend: ILegendType = BarChartDefaultValues.legend;\n  @Prop({ mutable: true }) annotations: object[] = BarChartDefaultValues.annotations;\n\n  // Calculation (6/7)\n  @Prop() maxValueOverride: number;\n  @Prop() minValueOverride: number;\n  @Prop({ mutable: true }) referenceLines: object[] = BarChartDefaultValues.referenceLines;\n\n  // Interactivity (7/7)\n  @Prop({ mutable: true }) suppressEvents: boolean = BarChartDefaultValues.suppressEvents;\n  @Prop({ mutable: true }) hoverHighlight: object;\n  @Prop({ mutable: true }) clickHighlight: object[] = BarChartDefaultValues.clickHighlight;\n  @Prop({ mutable: true }) interactionKeys: string[];\n\n  // Testing (8/7)\n  @Prop() unitTest: boolean = false;\n  //  @Prop() debugMode: boolean = false;\n\n  // Element\n  @Element()\n  barChartEl: HTMLElement;\n  shouldValidateAccessibility: boolean = true;\n  shouldValidateLocalization: boolean = true;\n  svg: any;\n  root: any;\n  rootG: any;\n  gridG: any;\n  bars: any;\n  labels: any;\n  nest: any;\n  referencesG: any;\n  defaults: boolean;\n  duration: number;\n  enter: any;\n  exit: any;\n  update: any;\n  enteringLabels: any;\n  exitingLabels: any;\n  updatingLabels: any;\n  x: any;\n  y: any;\n  innerHeight: number;\n  innerWidth: number;\n  innerPaddedHeight: number;\n  innerPaddedWidth: number;\n  colorArr: any;\n  preppedData: any;\n  displayOnlyLabelData: any;\n  placement: string;\n  legendG: any;\n  subTitleG: any;\n  tooltipG: any;\n  legendData: any;\n  // these are added for accessibility\n  updated: boolean = true;\n  enterSize: number;\n  exitSize: number;\n  tableData: any;\n  tableColumns: any;\n  chartID: string;\n  innerClickStyle: any;\n  innerHoverStyle: any;\n  innerInteractionKeys: any;\n  preparedColors: any;\n  fillColors: any;\n  strokeColors: any;\n  innerLabelAccessor: string;\n  shouldUpdateXAxis: boolean = false;\n  shouldUpdateYAxis: boolean = false;\n  shouldUpdateXGrid: boolean = false;\n  shouldUpdateYGrid: boolean = false;\n  shouldValidate: boolean = false;\n  shouldUpdateData: boolean = false;\n  shouldUpdateLayoutVariables: boolean = false;\n  shouldUpdateScales: boolean = false;\n  shouldUpdateTableData: boolean = false;\n  shouldUpdateAnnotations: boolean = false;\n  shouldDrawInteractionState: boolean = false;\n  shouldValidateClickStyle: boolean = false;\n  shouldValidateHoverStyle: boolean = false;\n  shouldSetSelectionClass: boolean = false;\n  shouldUpdateCursor: boolean = false;\n  shouldSetColors: boolean = false;\n  shouldSetSubTitle: boolean = false;\n  shouldUpdateGeometries: boolean = false;\n  shouldUpdateLegend: boolean = false;\n  shouldUpdateReferenceLines: boolean = false;\n  shouldBindInteractivity: boolean = false;\n  shouldUpdateLegendInteractivity: boolean = false;\n  shouldResetRoot: boolean = false;\n  shouldUpdateBaseline: boolean = false;\n  shouldValidateInteractionKeys: boolean = false;\n  shouldUpdateLabelData: boolean = false;\n  shouldUpdateLegendData: boolean = false;\n  shouldCheckValueAxis: boolean = false;\n  shouldCheckLabelAxis: boolean = false;\n  shouldUpdateCorners: boolean = false;\n  shouldEnterUpdateExit: boolean = false;\n  shouldSetGlobalSelections: boolean = false;\n  shouldSetTestingAttributes: boolean = false;\n  shouldValidateLabelPlacement: boolean = false;\n  shouldValidateDataLabelAccessor: boolean = false;\n  shouldCheckLabelColor: boolean = false;\n  shouldSetLabelOpacity: boolean = false;\n  shouldSetLabelPosition: boolean = false;\n  shouldSetLabelContent: boolean = false;\n  shouldUpdateDescriptionWrapper: boolean = false;\n  shouldSetChartAccessibilityTitle: boolean = false;\n  shouldSetChartAccessibilitySubtitle: boolean = false;\n  shouldSetChartAccessibilityLongDescription: boolean = false;\n  shouldSetChartAccessibilityExecutiveSummary: boolean = false;\n  shouldSetChartAccessibilityStatisticalNotes: boolean = false;\n  shouldSetChartAccessibilityStructureNotes: boolean = false;\n  shouldSetParentSVGAccessibility: boolean = false;\n  shouldSetGeometryAccessibilityAttributes: boolean = false;\n  shouldSetGeometryAriaLabels: boolean = false;\n  shouldSetGroupAccessibilityAttributes: boolean = false;\n  shouldSetGroupAccessibilityLabel: boolean = false;\n  shouldSetChartAccessibilityPurpose: boolean = false;\n  shouldSetChartAccessibilityContext: boolean = false;\n  shouldSetLegendCursor: boolean = false;\n  shouldRedrawWrapper: boolean = false;\n  shouldSetTagLevels: boolean = false;\n  shouldSetChartAccessibilityCount: boolean = false;\n  shouldSetYAxisAccessibility: boolean = false;\n  shouldSetXAxisAccessibility: boolean = false;\n  shouldSetAnnotationAccessibility: boolean = false;\n  shouldSetStrokes: boolean = false;\n  shouldSetTextures: boolean = false;\n  shouldSetLocalizationConfig: boolean = false;\n  topLevel: string = 'h2';\n  bottomLevel: string = 'p';\n  strokes: any = {};\n  bitmaps: any;\n\n  @Watch('data')\n  dataWatcher(_newVal, _oldVal) {\n    this.updated = true;\n    this.shouldUpdateData = true;\n    this.shouldUpdateLabelData = true;\n    this.shouldSetLabelPosition = true;\n    this.shouldSetColors = true;\n    this.shouldSetTextures = true;\n    // this.shouldDrawInteractionState = true; // called from updateGeometries\n    // this.shouldCheckLabelColor = true; // called from updateGeometries\n    this.shouldSetGlobalSelections = true;\n    this.shouldSetTestingAttributes = true;\n    this.shouldEnterUpdateExit = true;\n    this.shouldSetLabelContent = true;\n    this.shouldSetGeometryAccessibilityAttributes = true;\n    this.shouldSetGeometryAriaLabels = true;\n    this.shouldUpdateLegendData = true;\n    this.shouldUpdateTableData = true;\n    this.shouldUpdateScales = true;\n    this.shouldValidate = true;\n    this.shouldUpdateGeometries = true;\n    this.shouldUpdateXAxis = true;\n    this.shouldSetXAxisAccessibility = true;\n    this.shouldUpdateYAxis = true;\n    this.shouldSetYAxisAccessibility = true;\n    this.shouldUpdateXGrid = true;\n    this.shouldUpdateYGrid = true;\n    this.shouldUpdateLegend = true;\n    this.shouldUpdateReferenceLines = true;\n    this.shouldUpdateBaseline = true;\n    this.shouldUpdateAnnotations = true;\n    this.shouldSetStrokes = true;\n  }\n\n  @Watch('sortOrder')\n  sortWatcher(_newVal, _oldVal) {\n    this.updated = true;\n    this.shouldUpdateData = true;\n    this.shouldUpdateLabelData = true;\n    this.shouldSetGlobalSelections = true;\n    this.shouldSetTestingAttributes = true;\n    this.shouldEnterUpdateExit = true;\n    this.shouldSetGeometryAccessibilityAttributes = true;\n    this.shouldSetGeometryAriaLabels = true;\n    this.shouldUpdateTableData = true;\n    this.shouldUpdateScales = true;\n    this.shouldUpdateGeometries = true;\n    this.shouldSetLabelContent = true;\n    this.shouldSetLabelPosition = true;\n    this.shouldUpdateAnnotations = true;\n  }\n\n  @Watch('groupAccessor')\n  groupAccessorWatcher(_newVal, _oldVal) {\n    this.shouldUpdateLegendData = true;\n    this.shouldSetColors = true;\n    this.shouldSetTextures = true;\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldUpdateLegend = true;\n    this.shouldSetGeometryAriaLabels = true;\n    this.shouldSetGeometryAccessibilityAttributes = true;\n    this.shouldUpdateTableData = true;\n    this.shouldSetStrokes = true;\n    if (!(this.interactionKeys && this.interactionKeys.length)) {\n      this.shouldValidateInteractionKeys = true;\n      this.shouldSetSelectionClass = true;\n    }\n  }\n\n  @Watch('ordinalAccessor')\n  ordinalAccessorWatcher(_newVal, _oldVal) {\n    this.shouldUpdateTableData = true;\n    this.shouldUpdateScales = true;\n    this.shouldUpdateGeometries = true;\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldCheckLabelAxis = true;\n    this.shouldUpdateReferenceLines = true;\n    this.shouldUpdateBaseline = true;\n    this.shouldUpdateAnnotations = true;\n    this.shouldSetGeometryAriaLabels = true;\n    this.shouldSetStrokes = true;\n    if (!(this.interactionKeys && this.interactionKeys.length)) {\n      this.shouldValidateInteractionKeys = true;\n      this.shouldSetSelectionClass = true;\n    }\n  }\n\n  @Watch('valueAccessor')\n  valueAccessorWatcher(_newVal, _oldVal) {\n    this.shouldUpdateTableData = true;\n    this.shouldUpdateScales = true;\n    this.shouldSetColors = true;\n    this.shouldSetTextures = true;\n    this.shouldUpdateGeometries = true;\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckValueAxis = true;\n    this.shouldValidateDataLabelAccessor = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldSetLabelContent = true;\n    this.shouldSetLabelPosition = true;\n    this.shouldUpdateReferenceLines = true;\n    this.shouldUpdateBaseline = true;\n    this.shouldUpdateAnnotations = true;\n    this.shouldSetGeometryAriaLabels = true;\n    this.shouldSetStrokes = true;\n  }\n\n  @Watch('maxValueOverride')\n  @Watch('minValueOverride')\n  valueOverrideWatcher(_newVal, _oldVal) {\n    this.shouldUpdateScales = true;\n    this.shouldUpdateGeometries = true;\n    this.shouldCheckValueAxis = true;\n    this.shouldSetLabelPosition = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldUpdateReferenceLines = true;\n    this.shouldUpdateBaseline = true;\n    this.shouldUpdateAnnotations = true;\n  }\n\n  @Watch('highestHeadingLevel')\n  headingWatcher(_newVal, _oldVal) {\n    this.shouldRedrawWrapper = true;\n    this.shouldSetTagLevels = true;\n    this.shouldSetChartAccessibilityCount = true;\n    this.shouldSetYAxisAccessibility = true;\n    this.shouldSetXAxisAccessibility = true;\n    this.shouldUpdateDescriptionWrapper = true;\n    this.shouldSetAnnotationAccessibility = true;\n    this.shouldSetChartAccessibilityTitle = true;\n    this.shouldSetChartAccessibilitySubtitle = true;\n    this.shouldSetSubTitle = true;\n    this.shouldSetChartAccessibilityLongDescription = true;\n    this.shouldSetChartAccessibilityContext = true;\n    this.shouldSetChartAccessibilityExecutiveSummary = true;\n    this.shouldSetChartAccessibilityPurpose = true;\n    this.shouldSetChartAccessibilityStatisticalNotes = true;\n    this.shouldSetChartAccessibilityStructureNotes = true;\n  }\n\n  @Watch('mainTitle')\n  titleWatcher(_newVal, _oldVal) {\n    this.shouldValidate = true;\n    this.shouldUpdateDescriptionWrapper = true;\n    this.shouldSetChartAccessibilityTitle = true;\n    this.shouldSetParentSVGAccessibility = true;\n  }\n\n  @Watch('subTitle')\n  subtitleWatcher(_newVal, _oldVal) {\n    this.shouldSetSubTitle = true;\n    this.shouldSetChartAccessibilitySubtitle = true;\n    this.shouldSetParentSVGAccessibility = true;\n  }\n\n  @Watch('xAxis')\n  xAxisWatcher(_newVal, _oldVal) {\n    this.shouldUpdateXAxis = true;\n    this.shouldSetXAxisAccessibility = true;\n    const newGridVal = _newVal && _newVal.gridVisible;\n    const oldGridVal = _oldVal && _oldVal.gridVisible;\n    const newTickInterval = _newVal && _newVal.tickInterval ? _newVal.tickInterval : 0;\n    const oldTickInterval = _oldVal && _oldVal.tickInterval ? _oldVal.tickInterval : 0;\n    if (newGridVal !== oldGridVal || newTickInterval !== oldTickInterval) {\n      this.shouldUpdateXGrid = true;\n    }\n    const newCenterBaseline = _newVal && _newVal.centerBaseline;\n    const oldCenterBaseline = _oldVal && _oldVal.centerBaseline;\n    if (newCenterBaseline !== oldCenterBaseline) {\n      this.shouldValidateLabelPlacement = true;\n      this.shouldUpdateScales = true;\n      this.shouldResetRoot = true;\n      this.shouldUpdateGeometries = true;\n      this.shouldSetGeometryAccessibilityAttributes = true;\n      this.shouldUpdateXAxis = true;\n      this.shouldUpdateYAxis = true;\n      this.shouldUpdateXGrid = true;\n      this.shouldUpdateYGrid = true;\n      this.shouldSetLabelPosition = true;\n      this.shouldCheckLabelColor = true;\n      this.shouldUpdateLegend = true;\n      this.shouldUpdateReferenceLines = true;\n      this.shouldUpdateBaseline = true;\n      this.shouldUpdateAnnotations = true;\n    }\n  }\n\n  @Watch('yAxis')\n  yAxisWatcher(_newVal, _oldVal) {\n    this.shouldUpdateYAxis = true;\n    this.shouldSetYAxisAccessibility = true;\n    const newGridVal = _newVal && _newVal.gridVisible;\n    const oldGridVal = _oldVal && _oldVal.gridVisible;\n    const newTickInterval = _newVal && _newVal.tickInterval ? _newVal.tickInterval : 0;\n    const oldTickInterval = _oldVal && _oldVal.tickInterval ? _oldVal.tickInterval : 0;\n    if (newGridVal !== oldGridVal || newTickInterval !== oldTickInterval) {\n      this.shouldUpdateYGrid = true;\n    }\n    const newCenterBaseline = _newVal && _newVal.centerBaseline;\n    const oldCenterBaseline = _oldVal && _oldVal.centerBaseline;\n    if (newCenterBaseline !== oldCenterBaseline) {\n      this.shouldValidateLabelPlacement = true;\n      this.shouldUpdateScales = true;\n      this.shouldResetRoot = true;\n      this.shouldUpdateGeometries = true;\n      this.shouldSetGeometryAccessibilityAttributes = true;\n      this.shouldUpdateXAxis = true;\n      this.shouldUpdateYAxis = true;\n      this.shouldUpdateXGrid = true;\n      this.shouldUpdateYGrid = true;\n      this.shouldSetLabelPosition = true;\n      this.shouldCheckLabelColor = true;\n      this.shouldUpdateLegend = true;\n      this.shouldUpdateReferenceLines = true;\n      this.shouldUpdateBaseline = true;\n      this.shouldUpdateAnnotations = true;\n    }\n  }\n\n  @Watch('wrapLabel')\n  wrapLabelWatcher(_newVal, _oldVal) {\n    this.shouldCheckLabelAxis = true;\n  }\n\n  @Watch('colors')\n  @Watch('colorPalette')\n  colorsWatcher(_newVal, _oldVal) {\n    this.shouldSetColors = true;\n    this.shouldSetTextures = true;\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldUpdateLegend = true;\n    this.shouldSetStrokes = true;\n  }\n\n  @Watch('layout')\n  layoutWatcher(_newVal, _oldVal) {\n    this.shouldValidateLabelPlacement = true;\n    this.shouldUpdateScales = true;\n    this.shouldResetRoot = true;\n    this.shouldUpdateGeometries = true;\n    this.shouldSetGeometryAccessibilityAttributes = true;\n    this.shouldUpdateXAxis = true;\n    this.shouldUpdateYAxis = true;\n    this.shouldUpdateXGrid = true;\n    this.shouldUpdateYGrid = true;\n    this.shouldSetLabelPosition = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldUpdateLegend = true;\n    this.shouldUpdateReferenceLines = true;\n    this.shouldUpdateBaseline = true;\n    this.shouldUpdateAnnotations = true;\n  }\n\n  @Watch('height')\n  @Watch('width')\n  @Watch('padding')\n  @Watch('margin')\n  dimensionWatcher(_newVal, _oldVal) {\n    this.shouldUpdateLayoutVariables = true;\n    this.shouldUpdateScales = true;\n    this.shouldResetRoot = true;\n    this.shouldUpdateGeometries = true;\n    this.shouldUpdateXAxis = true;\n    this.shouldUpdateYAxis = true;\n    this.shouldUpdateXGrid = true;\n    this.shouldUpdateYGrid = true;\n    this.shouldSetLabelPosition = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldUpdateLegend = true;\n    this.shouldUpdateReferenceLines = true;\n    this.shouldUpdateBaseline = true;\n    this.shouldUpdateAnnotations = true;\n  }\n\n  @Watch('roundedCorner')\n  cornerWatcher(_newVal, _oldVal) {\n    this.shouldUpdateCorners = true;\n  }\n\n  @Watch('barIntervalRatio')\n  intervalRatioWatcher(_newVal, _oldVal) {\n    this.shouldUpdateScales = true;\n    this.shouldUpdateGeometries = true;\n    this.shouldCheckLabelAxis = true;\n    this.shouldSetLabelPosition = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldUpdateAnnotations = true;\n  }\n\n  @Watch('dataLabel')\n  labelWatcher(_newVal, _oldVal) {\n    const newPlacementVal = _newVal && _newVal.placement ? _newVal.placement : false;\n    const oldPlacementVal = _oldVal && _oldVal.placement ? _oldVal.placement : false;\n    const newCollisionPlacementVal = _newVal && _newVal.collisionPlacement ? _newVal.collisionPlacement : false;\n    const oldCollisionPlacementVal = _oldVal && _oldVal.collisionPlacement ? _oldVal.collisionPlacement : false;\n    const newVisibleVal = _newVal && _newVal.visible;\n    const oldVisibleVal = _oldVal && _oldVal.visible;\n    const newAccessor = _newVal && _newVal.labelAccessor ? _newVal.labelAccessor : false;\n    const oldAccessor = _oldVal && _oldVal.labelAccessor ? _oldVal.labelAccessor : false;\n    const newFormatVal = _newVal && _newVal.format ? _newVal.format : false;\n    const oldFormatVal = _oldVal && _oldVal.format ? _oldVal.format : false;\n    const newCollisionHideOnlyVal = _newVal && _newVal.collisionHideOnly ? _newVal.collisionHideOnly : false;\n    const oldCollisionHideOnlyVal = _oldVal && _oldVal.collisionHideOnly ? _oldVal.collisionHideOnly : false;\n    const newDisplayOnlyVal = _newVal && _newVal.displayOnly;\n    const oldDisplayOnlyVal = _oldVal && _oldVal.displayOnly;\n    if (newVisibleVal !== oldVisibleVal) {\n      this.shouldSetLabelOpacity = true;\n    }\n    if (newDisplayOnlyVal !== oldDisplayOnlyVal) {\n      this.shouldUpdateLabelData = true;\n      this.shouldSetLabelOpacity = true;\n    }\n    if (\n      newPlacementVal !== oldPlacementVal ||\n      newCollisionPlacementVal !== oldCollisionPlacementVal ||\n      newCollisionHideOnlyVal !== oldCollisionHideOnlyVal\n    ) {\n      this.shouldValidateLabelPlacement = true;\n      this.shouldSetLabelPosition = true;\n      this.shouldCheckLabelColor = true;\n    }\n    if (newAccessor !== oldAccessor || newFormatVal !== oldFormatVal) {\n      this.shouldUpdateTableData = true;\n      this.shouldValidateDataLabelAccessor = true;\n      this.shouldSetLabelContent = true;\n      this.shouldCheckLabelColor = true;\n    }\n  }\n\n  @Watch('legend')\n  legendWatcher(_newVal, _oldVal) {\n    this.shouldUpdateLegend = true;\n    const newInteractiveVal = _newVal && _newVal.interactive;\n    const oldInteractiveVal = _oldVal && _oldVal.interactive;\n    if (newInteractiveVal !== oldInteractiveVal) {\n      this.shouldSetLegendCursor = true;\n      this.shouldUpdateLegendInteractivity = true;\n    }\n  }\n\n  @Watch('tooltipLabel')\n  tooltipLabelWatcher(_newVal, _oldVal) {\n    this.shouldUpdateTableData = true;\n    this.shouldSetParentSVGAccessibility = true;\n    this.shouldSetGeometryAriaLabels = true;\n  }\n\n  @Watch('showTooltip')\n  showTooltipWatcher(_newVal, _oldVal) {\n    this.shouldDrawInteractionState = true;\n  }\n\n  @Watch('hoverOpacity')\n  hoverOpacityWatcher(_newVal, _oldVal) {\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n  }\n\n  @Watch('clickStyle')\n  clickStyleWatcher(_newVal, _oldVal) {\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldValidateClickStyle = true;\n    this.shouldSetStrokes = true;\n  }\n\n  @Watch('hoverStyle')\n  hoverStyleWatcher(_newVal, _oldVal) {\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldValidateHoverStyle = true;\n    this.shouldSetStrokes = true;\n  }\n\n  @Watch('clickHighlight')\n  clickWatcher(_newVal, _oldVal) {\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldSetSelectionClass = true;\n  }\n\n  @Watch('hoverHighlight')\n  hoverWatcher(_newVal, _oldVal) {\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n  }\n\n  @Watch('interactionKeys')\n  interactionWatcher(_newVal, _oldVal) {\n    this.shouldValidateInteractionKeys = true;\n    this.shouldDrawInteractionState = true;\n    this.shouldCheckLabelColor = true;\n    this.shouldSetSelectionClass = true;\n    this.shouldSetGeometryAriaLabels = true;\n    this.shouldUpdateTableData = true;\n  }\n\n  @Watch('dataKeyNames')\n  dataKeyNamesWatcher(_newVal, _oldVal) {\n    this.shouldUpdateXAxis = true;\n    this.shouldSetXAxisAccessibility = true;\n    this.shouldUpdateYAxis = true;\n    this.shouldSetYAxisAccessibility = true;\n    this.shouldSetParentSVGAccessibility = true;\n    this.shouldSetGroupAccessibilityLabel = true;\n    this.shouldSetGeometryAriaLabels = true;\n  }\n\n  @Watch('cursor')\n  cursorWatcher(_newVal, _oldVal) {\n    this.shouldUpdateCursor = true;\n    this.shouldSetLegendCursor = true;\n  }\n\n  @Watch('accessibility')\n  accessibilityWatcher(_newVal, _oldVal) {\n    this.shouldValidate = true;\n    const newTitle = _newVal && _newVal.title ? _newVal.title : false;\n    const oldTitle = _oldVal && _oldVal.title ? _oldVal.title : false;\n    if (newTitle !== oldTitle) {\n      this.shouldUpdateDescriptionWrapper = true;\n      this.shouldSetChartAccessibilityTitle = true;\n      this.shouldSetParentSVGAccessibility = true;\n    }\n    const newExecutiveSummary = _newVal && _newVal.executiveSummary ? _newVal.executiveSummary : false;\n    const oldExecutiveSummary = _oldVal && _oldVal.executiveSummary ? _oldVal.executiveSummary : false;\n    if (newExecutiveSummary !== oldExecutiveSummary) {\n      this.shouldSetChartAccessibilityExecutiveSummary = true;\n    }\n    const newPurpose = _newVal && _newVal.purpose ? _newVal.purpose : false;\n    const oldPurpose = _oldVal && _oldVal.purpose ? _oldVal.purpose : false;\n    if (newPurpose !== oldPurpose) {\n      this.shouldSetChartAccessibilityPurpose = true;\n    }\n    const newLongDescription = _newVal && _newVal.longDescription ? _newVal.longDescription : false;\n    const oldLongDescription = _oldVal && _oldVal.longDescription ? _oldVal.longDescription : false;\n    if (newLongDescription !== oldLongDescription) {\n      this.shouldSetChartAccessibilityLongDescription = true;\n    }\n    const newContext = _newVal && _newVal.contextExplanation ? _newVal.contextExplanation : false;\n    const oldContext = _oldVal && _oldVal.contextExplanation ? _oldVal.contextExplanation : false;\n    if (newContext !== oldContext) {\n      this.shouldSetChartAccessibilityContext = true;\n    }\n    const newStatisticalNotes = _newVal && _newVal.statisticalNotes ? _newVal.statisticalNotes : false;\n    const oldStatisticalNotes = _oldVal && _oldVal.statisticalNotes ? _oldVal.statisticalNotes : false;\n    if (newStatisticalNotes !== oldStatisticalNotes) {\n      this.shouldSetChartAccessibilityStatisticalNotes = true;\n    }\n    const newStructureNotes = _newVal && _newVal.structureNotes ? _newVal.structureNotes : false;\n    const oldStructureNotes = _oldVal && _oldVal.structureNotes ? _oldVal.structureNotes : false;\n    if (newStructureNotes !== oldStructureNotes) {\n      this.shouldSetChartAccessibilityStructureNotes = true;\n    }\n    const newincludeDataKeyNames = _newVal && _newVal.includeDataKeyNames;\n    const oldincludeDataKeyNames = _oldVal && _oldVal.includeDataKeyNames;\n    const newElementDescriptionAccessor =\n      _newVal && _newVal.elementDescriptionAccessor ? _newVal.elementDescriptionAccessor : false;\n    const oldElementDescriptionAccessor =\n      _oldVal && _oldVal.elementDescriptionAccessor ? _oldVal.elementDescriptionAccessor : false;\n    if (\n      newincludeDataKeyNames !== oldincludeDataKeyNames ||\n      newElementDescriptionAccessor !== oldElementDescriptionAccessor\n    ) {\n      if (newincludeDataKeyNames !== oldincludeDataKeyNames) {\n        // this one is tricky because it needs to run after the lifecycle\n        // AND it could run in the off-chance this prop is changed\n        this.shouldSetGroupAccessibilityLabel = true;\n      }\n      this.shouldSetGeometryAriaLabels = true;\n      this.shouldSetParentSVGAccessibility = true;\n    }\n    const newTextures = _newVal && _newVal.hideTextures ? _newVal.hideTextures : false;\n    const oldTextures = _oldVal && _oldVal.hideTextures ? _oldVal.hideTextures : false;\n    const newExTextures = _newVal && _newVal.showExperimentalTextures ? _newVal.showExperimentalTextures : false;\n    const oldExTextures = _oldVal && _oldVal.showExperimentalTextures ? _oldVal.showExperimentalTextures : false;\n    if (newTextures !== oldTextures || newExTextures !== oldExTextures) {\n      this.shouldSetTextures = true;\n      this.shouldUpdateLegend = true;\n      this.shouldDrawInteractionState = true;\n      this.shouldCheckLabelColor = true;\n    }\n    const newSmallValue = _newVal && _newVal.showSmallLabels ? _newVal.showSmallLabels : false;\n    const oldSmallValue = _oldVal && _oldVal.showSmallLabels ? _oldVal.showSmallLabels : false;\n    if (newSmallValue !== oldSmallValue) {\n      this.shouldSetLabelOpacity = true;\n    }\n    const newStrokes = _newVal && _newVal.hideStrokes ? _newVal.hideStrokes : false;\n    const oldStrokes = _oldVal && _oldVal.hideStrokes ? _oldVal.hideStrokes : false;\n    if (newStrokes !== oldStrokes) {\n      this.shouldSetStrokes = true;\n      this.shouldUpdateLegend = true;\n      this.shouldDrawInteractionState = true;\n    }\n    const newKeyNav =\n      _newVal && _newVal.keyboardNavConfig && _newVal.keyboardNavConfig.disabled\n        ? _newVal.keyboardNavConfig.disabled\n        : false;\n    const oldKeyNav =\n      _oldVal && _oldVal.keyboardNavConfig && _oldVal.keyboardNavConfig.disabled\n        ? _oldVal.keyboardNavConfig.disabled\n        : false;\n    const newInterface = _newVal && _newVal.elementsAreInterface ? _newVal.elementsAreInterface : false;\n    const oldInterface = _oldVal && _oldVal.elementsAreInterface ? _oldVal.elementsAreInterface : false;\n    if (newKeyNav !== oldKeyNav || newInterface !== oldInterface) {\n      this.shouldSetGeometryAriaLabels = true;\n      this.shouldSetParentSVGAccessibility = true;\n      this.shouldUpdateDescriptionWrapper = true;\n      this.shouldRedrawWrapper = true;\n      this.shouldSetChartAccessibilityTitle = true;\n      this.shouldSetChartAccessibilitySubtitle = true;\n      this.shouldSetChartAccessibilityLongDescription = true;\n      this.shouldSetChartAccessibilityContext = true;\n      this.shouldSetChartAccessibilityExecutiveSummary = true;\n      this.shouldSetChartAccessibilityPurpose = true;\n      this.shouldSetChartAccessibilityStatisticalNotes = true;\n      this.shouldSetChartAccessibilityStructureNotes = true;\n    }\n    if (newInterface !== oldInterface) {\n      this.shouldSetSelectionClass = true;\n    }\n  }\n\n  @Watch('referenceLines')\n  @Watch('referenceStyle')\n  referenceLinesWatcher(_newVal, _oldVal) {\n    this.shouldValidate = true;\n    this.shouldUpdateReferenceLines = true;\n    this.shouldUpdateAnnotations = true;\n    this.shouldSetAnnotationAccessibility = true;\n  }\n\n  @Watch('annotations')\n  annotationsWatcher(_newVal, _oldVal) {\n    this.shouldValidate = true;\n    this.shouldUpdateAnnotations = true;\n    this.shouldSetAnnotationAccessibility = true;\n  }\n\n  @Watch('localization')\n  localizationWatcher(_newVal, _oldVal) {\n    this.shouldValidate = true;\n\n    // language\n    const newLanguage = _newVal && _newVal.language ? _newVal.language : false;\n    const oldLanguage = _oldVal && _oldVal.language ? _oldVal.language : false;\n    if (newLanguage !== oldLanguage) {\n      this.shouldSetLocalizationConfig = true;\n      this.shouldUpdateTableData = true;\n      this.shouldValidateDataLabelAccessor = true;\n      this.shouldSetLabelContent = true;\n      this.shouldCheckLabelColor = true;\n      this.shouldRedrawWrapper = true;\n      this.shouldUpdateDescriptionWrapper = true;\n      this.shouldSetChartAccessibilityCount = true;\n      this.shouldSetYAxisAccessibility = true;\n      this.shouldSetXAxisAccessibility = true;\n      this.shouldUpdateDescriptionWrapper = true;\n      this.shouldSetGeometryAriaLabels = true;\n      this.shouldSetParentSVGAccessibility = true;\n    }\n\n    // numeralLocale\n    const newNumeralLocale = _newVal && _newVal.numeralLocale ? _newVal.numeralLocale : false;\n    const oldNumeralLocale = _oldVal && _oldVal.numeralLocale ? _oldVal.numeralLocale : false;\n    if (newNumeralLocale !== oldNumeralLocale) {\n      this.shouldSetLocalizationConfig = true;\n      this.shouldUpdateTableData = true;\n      this.shouldValidateDataLabelAccessor = true;\n      this.shouldSetLabelContent = true;\n      this.shouldCheckLabelColor = true;\n      this.shouldRedrawWrapper = true;\n      this.shouldUpdateDescriptionWrapper = true;\n      this.shouldSetChartAccessibilityCount = true;\n      this.shouldSetYAxisAccessibility = true;\n      this.shouldSetXAxisAccessibility = true;\n      this.shouldUpdateDescriptionWrapper = true;\n      this.shouldSetGeometryAriaLabels = true;\n      this.shouldSetParentSVGAccessibility = true;\n    }\n  }\n\n  @Watch('uniqueID')\n  idWatcher(newVal, _oldVal) {\n    console.error(\n      'Change detected in prop uniqueID from value ' +\n        _oldVal +\n        ' to value ' +\n        newVal +\n        '. This prop cannot be changed after component has loaded.'\n    );\n    // we have removed the ability to change this prop post load\n    // this.chartID = newVal || 'bar-chart-' + uuid();\n    // this.barChartEl.id = this.chartID;\n    // this.shouldValidate = true;\n    // this.shouldUpdateDescriptionWrapper = true;\n    // this.shouldSetParentSVGAccessibility = true;\n    // this.shouldUpdateLegend = true;\n    // this.shouldSetTextures = true;\n    // this.shouldCheckLabelColor = true;\n    // this.shouldDrawInteractionState = true;\n    // this.shouldSetStrokes = true;\n  }\n\n  @Watch('suppressEvents')\n  suppressWatcher(_newVal, _oldVal) {\n    this.shouldBindInteractivity = true;\n    this.shouldUpdateCursor = true;\n    this.shouldSetLegendCursor = true;\n    this.shouldUpdateLegendInteractivity = true;\n    this.shouldSetGeometryAriaLabels = true;\n    this.shouldSetParentSVGAccessibility = true;\n    this.shouldUpdateDescriptionWrapper = true;\n    this.shouldValidate = true;\n    this.shouldRedrawWrapper = true;\n    this.shouldSetSubTitle = true;\n    this.shouldSetChartAccessibilityTitle = true;\n    this.shouldSetChartAccessibilitySubtitle = true;\n    this.shouldSetChartAccessibilityLongDescription = true;\n    this.shouldSetChartAccessibilityContext = true;\n    this.shouldSetChartAccessibilityExecutiveSummary = true;\n    this.shouldSetChartAccessibilityPurpose = true;\n    this.shouldSetChartAccessibilityStatisticalNotes = true;\n    this.shouldSetChartAccessibilityStructureNotes = true;\n  }\n\n  @Watch('unitTest')\n  unitTestWatcher(_newVal, _oldVal) {\n    this.shouldSetTestingAttributes = true;\n  }\n\n  componentWillLoad() {\n    const chartID = this.uniqueID || 'bar-chart-' + uuid();\n    this.initialLoadEvent.emit({ chartID: chartID });\n    // contrary to componentWillUpdate, this method appears safe to use for\n    // any calculations we need. Keeping them here reduces future refactor,\n    // since componentWillUpdate should eventually mirror this method\n    return new Promise(resolve => {\n      this.duration = 0;\n      this.defaults = true;\n      this.chartID = chartID;\n      this.barChartEl.id = this.chartID;\n      this.setLocalizationConfig();\n      this.setTagLevels();\n      this.prepareData();\n      this.prepareLegendData();\n      this.prepareLabelData();\n      this.updateChartVariable();\n      this.prepareScales();\n      this.validateInteractionKeys();\n      this.setTableData();\n      this.shouldValidateAccessibilityProps();\n      this.shouldValidateLocalizationProps();\n      this.validateClickStyle();\n      this.validateHoverStyle();\n      this.setColors();\n      resolve('component will load');\n    });\n  }\n\n  componentWillUpdate() {\n    // NEVER put items in this method that rely on props (until stencil bug is resolved)\n    // All items that belong here are currently at the top of render\n    // see: https://github.com/ionic-team/stencil/issues/2061#issuecomment-578282178\n    return new Promise(resolve => {\n      resolve('component will update');\n    });\n  }\n\n  componentDidLoad() {\n    return new Promise(resolve => {\n      this.shouldValidateAccessibilityProps();\n      this.shouldValidateLocalizationProps();\n      this.renderRootElements();\n      this.setTooltipInitialStyle();\n      this.setChartDescriptionWrapper();\n      this.setChartAccessibilityTitle();\n      this.setChartAccessibilitySubtitle();\n      this.setChartAccessibilityLongDescription();\n      this.setChartAccessibilityExecutiveSummary();\n      this.setChartAccessibilityPurpose();\n      this.setChartAccessibilityContext();\n      this.setChartAccessibilityStatisticalNotes();\n      this.setChartAccessibilityStructureNotes();\n      this.setParentSVGAccessibility();\n      this.reSetRoot();\n      this.setTextures();\n      this.setStrokes();\n      this.setSubTitleElements();\n      this.drawXGrid();\n      this.drawYGrid();\n      this.setGlobalSelections();\n      this.setTestingAttributes();\n      this.validateClickStyle();\n      this.validateHoverStyle();\n      this.validateDataLabelAccessor();\n      this.enterGeometries();\n      this.updateGeometries();\n      this.exitGeometries();\n      this.enterLabels();\n      this.updateLabels();\n      this.exitLabels();\n      this.drawGeometries();\n      this.setChartCountAccessibility();\n      this.setGeometryAccessibilityAttributes();\n      this.setGeometryAriaLabels();\n      this.setRoundedCorners();\n      this.drawLegendElements();\n      this.validateLabelPlacement();\n      this.setLabelContent();\n      this.processLabelPosition(this.updatingLabels, false, true, false);\n      this.drawReferenceLines();\n      this.setSelectedClass();\n      this.checkLabelColorAgainstBackground();\n      this.updateCursor();\n      this.bindInteractivity();\n      this.bindLegendInteractivity();\n      this.drawXAxis();\n      this.setXAxisAccessibility();\n      this.drawYAxis();\n      this.setYAxisAccessibility();\n      this.drawAnnotations();\n      this.setAnnotationAccessibility();\n      this.drawBaseline();\n      this.onChangeHandler();\n      // we want to hide all child <g> of this.root BUT we want to make sure not to hide the\n      // parent<g> that contains our geometries! In a subGroup chart (like stacked bars),\n      // we want to pass the PARENT of all the <g>s that contain bars\n      hideNonessentialGroups(this.root.node(), this.bars.node());\n      this.setGroupAccessibilityAttributes();\n      this.setGroupAccessibilityID();\n      this.defaults = false;\n      // catch all to remove entering class from labels once we have loaded component\n      this.updatingLabels.classed('entering', false);\n      resolve('component did load');\n    }).then(() => this.initialLoadEndEvent.emit({ chartID: this.chartID }));\n  }\n\n  componentDidUpdate() {\n    return new Promise(resolve => {\n      this.duration = !this.animationConfig || !this.animationConfig.disabled ? 750 : 0;\n      if (this.shouldUpdateDescriptionWrapper) {\n        this.setChartDescriptionWrapper();\n        this.shouldUpdateDescriptionWrapper = false;\n      }\n      if (this.shouldSetChartAccessibilityCount) {\n        this.setChartCountAccessibility();\n        this.shouldSetChartAccessibilityCount = false;\n      }\n      if (this.shouldSetChartAccessibilityTitle) {\n        this.setChartAccessibilityTitle();\n        this.shouldSetChartAccessibilityTitle = false;\n      }\n      if (this.shouldSetChartAccessibilitySubtitle) {\n        this.setChartAccessibilitySubtitle();\n        this.shouldSetChartAccessibilitySubtitle = false;\n      }\n      if (this.shouldSetChartAccessibilityLongDescription) {\n        this.setChartAccessibilityLongDescription();\n        this.shouldSetChartAccessibilityLongDescription = false;\n      }\n      if (this.shouldSetChartAccessibilityExecutiveSummary) {\n        this.setChartAccessibilityExecutiveSummary();\n        this.shouldSetChartAccessibilityExecutiveSummary = false;\n      }\n      if (this.shouldSetChartAccessibilityPurpose) {\n        this.setChartAccessibilityPurpose();\n        this.shouldSetChartAccessibilityPurpose = false;\n      }\n      if (this.shouldSetChartAccessibilityContext) {\n        this.setChartAccessibilityContext();\n        this.shouldSetChartAccessibilityContext = false;\n      }\n      if (this.shouldSetChartAccessibilityStatisticalNotes) {\n        this.setChartAccessibilityStatisticalNotes();\n        this.shouldSetChartAccessibilityStatisticalNotes = false;\n      }\n      if (this.shouldSetChartAccessibilityStructureNotes) {\n        this.setChartAccessibilityStructureNotes();\n        this.shouldSetChartAccessibilityStructureNotes = false;\n      }\n      if (this.shouldSetParentSVGAccessibility) {\n        this.setParentSVGAccessibility();\n        this.shouldSetParentSVGAccessibility = false;\n      }\n      if (this.shouldResetRoot) {\n        this.reSetRoot();\n        this.shouldResetRoot = false;\n      }\n      if (this.shouldSetTextures) {\n        this.setTextures();\n        this.shouldSetTextures = false;\n      }\n      if (this.shouldSetStrokes) {\n        this.setStrokes();\n        this.shouldSetStrokes = false;\n      }\n      if (this.shouldSetGlobalSelections) {\n        this.setGlobalSelections();\n        this.shouldSetGlobalSelections = false;\n      }\n      if (this.shouldSetTestingAttributes) {\n        this.setTestingAttributes();\n        this.shouldSetTestingAttributes = false;\n      }\n      if (this.shouldSetSubTitle) {\n        this.setSubTitleElements();\n        this.shouldSetSubTitle = false;\n      }\n      if (this.shouldUpdateXGrid) {\n        this.drawXGrid();\n        this.shouldUpdateXGrid = false;\n      }\n      if (this.shouldUpdateYGrid) {\n        this.drawYGrid();\n        this.shouldUpdateYGrid = false;\n      }\n      if (this.shouldEnterUpdateExit) {\n        this.enterGeometries();\n        this.updateGeometries();\n        this.exitGeometries();\n        this.enterLabels();\n        this.updateLabels();\n        this.exitLabels();\n        this.shouldEnterUpdateExit = false;\n      }\n      if (this.shouldUpdateGeometries) {\n        this.drawGeometries();\n        this.shouldUpdateGeometries = false;\n      }\n      if (this.shouldSetGeometryAccessibilityAttributes) {\n        this.setGeometryAccessibilityAttributes();\n        this.shouldSetGeometryAccessibilityAttributes = false;\n      }\n      if (this.shouldSetGeometryAriaLabels) {\n        this.setGeometryAriaLabels();\n        this.shouldSetGeometryAriaLabels = false;\n      }\n      // if a component's <g> elements can enter/exit, this will need to be called\n      // in the lifecycle more than just initially\n      // if (this.shouldSetGroupAccessibilityAttributes) {\n      //   this.setGroupAccessibilityAttributes()\n      //   this.shouldSetGroupAccessibilityAttributes = false\n      // }\n      if (this.shouldSetGroupAccessibilityLabel) {\n        this.setGroupAccessibilityID();\n        this.shouldSetGroupAccessibilityLabel = false;\n      }\n      if (this.shouldUpdateCorners) {\n        this.setRoundedCorners();\n        this.shouldUpdateCorners = false;\n      }\n      if (this.shouldUpdateLegend) {\n        this.drawLegendElements();\n        this.shouldUpdateLegend = false;\n      }\n      if (this.shouldSetLabelContent) {\n        this.setLabelContent();\n        this.shouldSetLabelContent = false;\n      }\n      if (this.shouldSetLabelPosition) {\n        this.setLabelPosition();\n        this.shouldSetLabelPosition = false;\n      }\n      if (this.shouldUpdateReferenceLines) {\n        this.drawReferenceLines();\n        this.shouldUpdateReferenceLines = false;\n      }\n      if (this.shouldDrawInteractionState) {\n        this.updateInteractionState();\n        this.shouldDrawInteractionState = false;\n      }\n      if (this.shouldSetLabelOpacity) {\n        this.setLabelOpacity();\n        this.shouldSetLabelOpacity = false;\n      }\n      if (this.shouldCheckLabelColor) {\n        this.checkLabelColorAgainstBackground();\n        this.shouldCheckLabelColor = false;\n      }\n      if (this.shouldSetSelectionClass) {\n        this.setSelectedClass();\n        this.shouldSetSelectionClass = false;\n      }\n      if (this.shouldUpdateLegendInteractivity) {\n        this.bindLegendInteractivity();\n        this.shouldUpdateLegendInteractivity = false;\n      }\n      if (this.shouldSetLegendCursor) {\n        this.setLegendCursor();\n        this.shouldSetLegendCursor = false;\n      }\n      if (this.shouldUpdateCursor) {\n        this.updateCursor();\n        this.shouldUpdateCursor = false;\n      }\n      if (this.shouldBindInteractivity) {\n        this.bindInteractivity();\n        this.shouldBindInteractivity = false;\n      }\n      if (this.shouldUpdateXAxis) {\n        this.drawXAxis();\n        this.shouldUpdateXAxis = false;\n      }\n      if (this.shouldSetXAxisAccessibility) {\n        this.setXAxisAccessibility();\n        this.shouldSetXAxisAccessibility = false;\n      }\n      if (this.shouldUpdateYAxis) {\n        this.drawYAxis();\n        this.shouldUpdateYAxis = false;\n      }\n      if (this.shouldSetYAxisAccessibility) {\n        this.setYAxisAccessibility();\n        this.shouldSetYAxisAccessibility = false;\n      }\n      if (this.shouldUpdateAnnotations) {\n        this.drawAnnotations();\n        this.shouldUpdateAnnotations = false;\n      }\n      if (this.shouldSetAnnotationAccessibility) {\n        this.setAnnotationAccessibility();\n        this.shouldSetAnnotationAccessibility = false;\n      }\n      if (this.shouldUpdateBaseline) {\n        this.drawBaseline();\n        this.shouldUpdateBaseline = false;\n      }\n      this.onChangeHandler();\n      this.updatingLabels.classed('entering', false);\n      resolve('component did update');\n    }).then(() => this.drawEndEvent.emit({ chartID: this.chartID }));\n  }\n\n  shouldValidateLocalizationProps() {\n    const windowInstances = getGlobalInstances();\n    const languageString = windowInstances.i18Next.language;\n    const languageObject = windowInstances.i18Next.getResourceBundle(languageString);\n    const numeralObject = windowInstances.numeral.localeData();\n    if (this.shouldValidateLocalization && !this.localization.skipValidation) {\n      this.shouldValidateLocalization = false;\n      validateLocalizationProps(this.chartID, {\n        ...this.localization,\n        language: languageObject,\n        numeralLocale: numeralObject\n      });\n    }\n  }\n\n  shouldValidateAccessibilityProps() {\n    if (this.shouldValidateAccessibility && !this.accessibility.disableValidation) {\n      this.shouldValidateAccessibility = false;\n      validateAccessibilityProps(\n        this.chartID,\n        { ...this.accessibility },\n        {\n          annotations: this.annotations,\n          data: this.data,\n          uniqueID: this.uniqueID,\n          context: {\n            mainTitle: this.mainTitle,\n            onClickEvent: this.suppressEvents ? undefined : this.clickEvent.emit\n          }\n        }\n      );\n    }\n  }\n\n  validateInteractionKeys() {\n    this.innerInteractionKeys =\n      this.interactionKeys && this.interactionKeys.length\n        ? this.interactionKeys\n        : [this.groupAccessor || this.ordinalAccessor];\n  }\n\n  validateDataLabelAccessor() {\n    this.innerLabelAccessor = this.dataLabel.labelAccessor ? this.dataLabel.labelAccessor : this.valueAccessor;\n  }\n\n  getLanguageString() {\n    return getActiveLanguageString(this.localization);\n  }\n\n  setLocalizationConfig() {\n    configLocalization(this.localization);\n  }\n\n  setTagLevels() {\n    this.topLevel = findTagLevel(this.highestHeadingLevel);\n    this.bottomLevel = findTagLevel(this.highestHeadingLevel, 3);\n  }\n\n  updateChartVariable() {\n    this.padding = typeof this.padding === 'string' ? getPadding(this.padding) : this.padding;\n\n    // before we render/load we need to set our height and width based on props\n    this.innerHeight = this.height - this.margin.top - this.margin.bottom;\n    this.innerWidth = this.width - this.margin.left - this.margin.right;\n\n    this.innerPaddedHeight = this.innerHeight - this.padding.top - this.padding.bottom;\n    this.innerPaddedWidth = this.innerWidth - this.padding.left - this.padding.right;\n  }\n\n  prepareData() {\n    if (this.data) {\n      if (this.sortOrder === 'asc') {\n        this.preppedData = [...this.data].sort((a, b) => {\n          a[this.valueAccessor] = parseFloat(a[this.valueAccessor]);\n          b[this.valueAccessor] = parseFloat(b[this.valueAccessor]);\n          return a[this.valueAccessor] - b[this.valueAccessor];\n        });\n      } else if (this.sortOrder === 'desc') {\n        this.preppedData = [...this.data].sort((a, b) => {\n          a[this.valueAccessor] = parseFloat(a[this.valueAccessor]);\n          b[this.valueAccessor] = parseFloat(b[this.valueAccessor]);\n          return b[this.valueAccessor] - a[this.valueAccessor];\n        });\n      } else {\n        this.preppedData = this.data;\n        this.preppedData.map(d => {\n          d[this.valueAccessor] = parseFloat(d[this.valueAccessor]);\n        });\n      }\n    }\n  }\n\n  prepareLegendData() {\n    const nested = nest()\n      .key(d => d[this.groupAccessor])\n      .entries(this.preppedData);\n\n    this.legendData = [];\n    nested.forEach(el => {\n      this.legendData.push(el.values[0]);\n    });\n  }\n\n  prepareLabelData() {\n    if (this.preppedData) {\n      // min\n      const minIdx = minIndex(this.preppedData, d => d[this.valueAccessor]);\n      const minItem = this.preppedData[minIdx];\n      // max\n      const maxIdx = maxIndex(this.preppedData, d => d[this.valueAccessor]);\n      const maxItem = this.preppedData[maxIdx];\n      // first\n      const firstItem = this.preppedData.find(val => val[this.valueAccessor] != null);\n      // last\n      const lastItem = [...this.preppedData].reverse().find(val => val[this.valueAccessor] != null);\n\n      this.displayOnlyLabelData = {\n        first: [firstItem],\n        last: [lastItem],\n        min: [minItem],\n        max: [maxItem]\n      };\n    }\n  }\n\n  setSubTitleElements() {\n    setSubTitle({\n      root: this.subTitleG,\n      subTitle: this.subTitle\n    });\n  }\n\n  setColors() {\n    const colorFromProps = this.colors ? convertVisaColor(this.colors) : this.colorPalette;\n\n    const minValue = min(this.preppedData, d => d[this.valueAccessor]);\n    const maxValue = max(this.preppedData, d => d[this.valueAccessor]);\n\n    this.preparedColors = this.groupAccessor\n      ? getColors(\n          colorFromProps,\n          scaleOrdinal()\n            .domain(this.data.map(d => d[this.groupAccessor]))\n            .domain()\n        )\n      : getColors(colorFromProps, [minValue, maxValue]);\n\n    const colors = this.preparedColors.range ? this.preparedColors.range() : this.preparedColors;\n    const strokeColors = [];\n    const backgroundColors = [];\n    let i = 0;\n    const half = Math.ceil(colors.length / 2);\n    const isDiverging = this.colorPalette && this.colorPalette.includes('diverging');\n    const isDark = this.colorPalette && this.colorPalette.includes('dark');\n    const scheme = this.groupAccessor || colors.length === 1 ? 'categorical' : isDiverging ? 'diverging' : 'sequential';\n    colors.forEach(color => {\n      const colorsMatchingScheme = prepareStrokeColorsFromScheme(color, i, colors, scheme);\n      if (scheme === 'diverging') {\n        const fillLuminance = calculateLuminance(colorsMatchingScheme.fillColor);\n        const strokeLuminance = calculateLuminance(colorsMatchingScheme.textureColor);\n        const darkerColor =\n          fillLuminance > strokeLuminance ? colorsMatchingScheme.textureColor : colorsMatchingScheme.fillColor;\n        const lighterColor =\n          fillLuminance < strokeLuminance ? colorsMatchingScheme.textureColor : colorsMatchingScheme.fillColor;\n        if (colors.length % 2 && i === (colors.length - 1) / 2) {\n          backgroundColors.push(isDark ? darkerColor : lighterColor);\n          strokeColors.push(isDark ? lighterColor : darkerColor);\n        } else {\n          strokeColors.push(isDark ? darkerColor : lighterColor);\n          backgroundColors.push(isDark ? lighterColor : darkerColor);\n        }\n      } else {\n        if (i + 1 < half) {\n          backgroundColors.push(colors[0]);\n          strokeColors.push(colors[colors.length - 1]);\n        } else {\n          strokeColors.push(colors[0]);\n          backgroundColors.push(colors[colors.length - 1]);\n        }\n      }\n      i++;\n    });\n\n    this.fillColors = this.preparedColors.copy().range(backgroundColors);\n\n    this.strokeColors = this.preparedColors.copy().range(strokeColors);\n  }\n\n  setTextures() {\n    const colorsArray = this.preparedColors.range ? this.preparedColors.range() : this.preparedColors;\n    const scheme =\n      this.groupAccessor || colorsArray.length === 1\n        ? 'categorical'\n        : this.colorPalette && this.colorPalette.includes('diverging')\n        ? 'diverging'\n        : 'sequential';\n    if (\n      this.accessibility.hideTextures ||\n      (scheme === 'categorical' && colorsArray.length > 6) ||\n      (scheme !== 'categorical' && !this.accessibility.showExperimentalTextures)\n    ) {\n      this.colorArr = this.preparedColors;\n    } else {\n      const textures = convertColorsToTextures({\n        colors: colorsArray,\n        rootSVG: this.svg.node(),\n        id: this.chartID,\n        scheme,\n        disableTransitions: !this.duration\n      });\n      this.colorArr = this.preparedColors.copy().range(textures);\n    }\n  }\n\n  setStrokes() {\n    const colorsArray = this.preparedColors.range ? this.preparedColors.range() : this.preparedColors;\n    const scheme =\n      this.groupAccessor || colorsArray.length === 1\n        ? 'categorical'\n        : this.colorPalette && this.colorPalette.includes('diverging')\n        ? 'diverging'\n        : 'sequential';\n    this.strokes = buildStrokes({\n      root: this.svg.node(),\n      id: this.chartID,\n      colors:\n        !this.accessibility.hideTextures && scheme !== 'categorical' && this.accessibility.showExperimentalTextures\n          ? this.fillColors.range()\n          : colorsArray,\n      clickStyle: this.innerClickStyle,\n      hoverStyle: this.innerHoverStyle,\n      strokeOverride:\n        !this.accessibility.hideTextures && scheme !== 'categorical' && this.accessibility.showExperimentalTextures\n          ? this.strokeColors.range()\n          : undefined\n    });\n  }\n\n  setTableData() {\n    // generate scoped and formatted data for data-table component\n    const keys = scopeDataKeys(this, chartAccessors, 'bar-chart');\n    this.tableData = getScopedData(this.preppedData, keys);\n    this.tableColumns = Object.keys(keys);\n  }\n\n  validateLabelPlacement() {\n    // check data label placement assignment based on layout\n    this.placement = this.dataLabel.placement;\n    if (this.layout === 'vertical') {\n      if (this.placement !== 'top' && this.placement !== 'bottom' && this.placement !== 'auto') {\n        this.placement = 'top';\n      }\n    } else {\n      if (!this.placement || this.placement === 'top' || this.placement === 'bottom') {\n        this.placement = 'right';\n      }\n    }\n  }\n\n  // scale band based on layout of chart, called in mulitple places to reduce code repetition\n  shouldCenterBaseline() {\n    return (\n      ((this.xAxis.centerBaseline && this.layout === 'horizontal') ||\n        (this.yAxis.centerBaseline && this.layout === 'vertical')) &&\n      min(this.preppedData, d => d[this.valueAccessor]) >= 0\n    );\n  }\n\n  prepareScales() {\n    // if center baseline then (1) use maxOverride halved or (2) use data halved\n    // else (1) use minOverride or (2) use data\n    const minBarValue = this.shouldCenterBaseline()\n      ? this.maxValueOverride && this.maxValueOverride > max(this.preppedData, d => d[this.valueAccessor])\n        ? -halve(this.maxValueOverride)\n        : -halve(max(this.preppedData, d => d[this.valueAccessor]))\n      : this.minValueOverride && this.minValueOverride < min(this.preppedData, d => d[this.valueAccessor])\n      ? this.minValueOverride\n      : min(this.preppedData, d => d[this.valueAccessor]);\n\n    const maxBarValue = this.shouldCenterBaseline()\n      ? this.maxValueOverride && this.maxValueOverride > max(this.preppedData, d => d[this.valueAccessor])\n        ? halve(this.maxValueOverride)\n        : halve(max(this.preppedData, d => d[this.valueAccessor]))\n      : this.maxValueOverride && this.maxValueOverride > max(this.preppedData, d => d[this.valueAccessor])\n      ? this.maxValueOverride\n      : max(this.preppedData, d => d[this.valueAccessor]);\n\n    if (this.layout === 'vertical') {\n      this.y = scaleLinear()\n        .domain([Math.min(0, minBarValue), Math.max(0, maxBarValue)])\n        .range([this.innerPaddedHeight, 0]);\n      this.x = scaleBand()\n        .domain(this.preppedData.map(d => d[this.ordinalAccessor]))\n        .range([0, this.innerPaddedWidth])\n        .padding(this.barIntervalRatio);\n    } else if (this.layout === 'horizontal') {\n      this.x = scaleLinear()\n        .domain([Math.min(0, minBarValue), Math.max(0, maxBarValue)])\n        .range([0, this.innerPaddedWidth]);\n\n      this.y = scaleBand()\n        .domain(this.preppedData.map(d => d[this.ordinalAccessor]))\n        .range([0, this.innerPaddedHeight])\n        .padding(this.barIntervalRatio);\n    }\n  }\n\n  // reset graph size based on window size\n  reSetRoot() {\n    const changeSvg = prepareRenderChange({\n      selection: this.svg,\n      duration: this.duration,\n      namespace: 'root_reset',\n      easing: easeCircleIn\n    });\n\n    changeSvg\n      .attr('width', this.width)\n      .attr('height', this.height)\n      .attr('viewBox', '0 0 ' + this.width + ' ' + this.height);\n\n    const changeRoot = prepareRenderChange({\n      selection: this.root,\n      duration: this.duration,\n      namespace: 'root_reset',\n      easing: easeCircleIn\n    });\n\n    changeRoot.attr('transform', `translate(${this.margin.left}, ${this.margin.top})`);\n\n    const changeRootG = prepareRenderChange({\n      selection: this.rootG,\n      duration: this.duration,\n      namespace: 'root_reset',\n      easing: easeCircleIn\n    });\n\n    changeRootG.attr('transform', `translate(${this.padding.left}, ${this.padding.top})`);\n\n    setAccessibilityDescriptionWidth(this.chartID, this.width);\n  }\n\n  // this function is used in drawAxis and setAccessAxis functions to determine (inverse) visible\n  // of the relevant axis + layout combination\n  checkHideAxisState(axisName: string, relevantLayout: string, minValue: number) {\n    return this[axisName].centerBaseline && this.layout === relevantLayout && minValue >= 0\n      ? true\n      : !this[axisName].visible;\n  }\n\n  // draw axis line\n  drawXAxis() {\n    const axisAccessor = this.layout === 'vertical' ? this.ordinalAccessor : this.valueAccessor;\n    const axisLabel =\n      this.xAxis.label || this.xAxis.label === ''\n        ? this.xAxis.label\n        : this.dataKeyNames && this.dataKeyNames[axisAccessor]\n        ? this.dataKeyNames[axisAccessor]\n        : this.xAxis.label;\n\n    drawAxis({\n      root: this.rootG,\n      height: this.innerPaddedHeight,\n      width: this.innerPaddedWidth,\n      axisScale: this.x,\n      left: false,\n      wrapLabel: this.wrapLabel && this.layout === 'vertical' ? this.innerPaddedWidth / this.data.length : '',\n      format: this.xAxis.format,\n      dateFormat: this.xAxis.format,\n      tickInterval: this.xAxis.tickInterval,\n      label: axisLabel, // this.xAxis.label,\n      padding: this.padding,\n      hide: this.checkHideAxisState('xAxis', 'horizontal', min(this.preppedData, d => d[this.valueAccessor])),\n      duration: this.duration\n    });\n  }\n\n  drawYAxis() {\n    const axisAccessor = this.layout === 'vertical' ? this.valueAccessor : this.ordinalAccessor;\n    const axisLabel =\n      this.yAxis.label && this.yAxis.label !== ''\n        ? this.yAxis.label\n        : this.dataKeyNames && this.dataKeyNames[axisAccessor]\n        ? this.dataKeyNames[axisAccessor]\n        : this.yAxis.label;\n\n    drawAxis({\n      root: this.rootG,\n      height: this.innerPaddedHeight,\n      width: this.innerPaddedWidth,\n      axisScale: this.y,\n      left: true,\n      wrapLabel: this.wrapLabel ? this.padding.left || 100 : '',\n      format: this.yAxis.format,\n      dateFormat: this.yAxis.format,\n      tickInterval: this.yAxis.tickInterval,\n      label: axisLabel, // this.yAxis.label,\n      padding: this.padding,\n      hide: this.checkHideAxisState('yAxis', 'vertical', min(this.preppedData, d => d[this.valueAccessor])),\n      duration: this.duration\n    });\n  }\n\n  drawBaseline() {\n    // add baseline at 0\n    if (this.layout === 'vertical' && !this.shouldCenterBaseline()) {\n      drawAxis({\n        root: this.rootG,\n        height: this.innerPaddedHeight,\n        width: this.innerPaddedWidth,\n        axisScale: this.x,\n        left: false,\n        padding: this.padding,\n        markOffset: this.y(0) || -1,\n        duration: this.duration\n      });\n    }\n    if (this.layout === 'horizontal') {\n      drawAxis({\n        root: this.rootG,\n        height: this.innerPaddedHeight,\n        width: this.innerPaddedWidth,\n        axisScale: this.y,\n        left: true,\n        padding: this.padding,\n        markOffset: this.shouldCenterBaseline()\n          ? this.maxValueOverride && this.maxValueOverride > max(this.preppedData, d => d[this.valueAccessor])\n            ? -halve(this.maxValueOverride)\n            : -halve(max(this.preppedData, d => d[this.valueAccessor]))\n          : this.minValueOverride && this.minValueOverride < min(this.preppedData, d => d[this.valueAccessor])\n          ? this.minValueOverride\n          : this.x(0) || -1,\n        duration: this.duration\n      });\n    }\n  }\n\n  setXAxisAccessibility() {\n    const axisAccessor = this.layout === 'vertical' ? this.ordinalAccessor : this.valueAccessor;\n    const axisLabel =\n      this.xAxis.label && this.xAxis.label !== ''\n        ? this.xAxis.label\n        : this.dataKeyNames && this.dataKeyNames[axisAccessor]\n        ? this.dataKeyNames[axisAccessor]\n        : this.xAxis.label;\n\n    setAccessXAxis({\n      rootEle: this.barChartEl,\n      hasXAxis: !this.checkHideAxisState('xAxis', 'horizontal', min(this.preppedData, d => d[this.valueAccessor])), // this is inverse of how drawAxis works\n      xAxis: this.x ? this.x : false, // this is optional for some charts, if hasXAxis is always false\n      xAxisLabel: axisLabel ? axisLabel : '' // this is optional for some charts, if hasXAxis is always false\n    });\n  }\n\n  setYAxisAccessibility() {\n    const axisAccessor = this.layout === 'vertical' ? this.valueAccessor : this.ordinalAccessor;\n    const axisLabel =\n      this.yAxis.label && this.yAxis.label !== ''\n        ? this.yAxis.label\n        : this.dataKeyNames && this.dataKeyNames[axisAccessor]\n        ? this.dataKeyNames[axisAccessor]\n        : this.yAxis.label;\n\n    setAccessYAxis({\n      rootEle: this.barChartEl,\n      hasYAxis: !this.checkHideAxisState('yAxis', 'vertical', min(this.preppedData, d => d[this.valueAccessor])), // this is inverse of how drawAxis works\n      yAxis: this.y ? this.y : false, // this is optional for some charts, if hasXAxis is always false\n      yAxisLabel: axisLabel ? axisLabel : '' // this is optional for some charts, if hasXAxis is always false\n      // secondaryYAxis?: any, // pareto uses this\n      // secondaryYAxisLabel?: string, // pareto uses this\n      // xAxisLabel: this.xAxis.label ? this.xAxis.label : '' // parallel uses this to label all the y axes\n    });\n  }\n\n  // dashed line grid for chart\n  drawXGrid() {\n    drawGrid(\n      this.gridG,\n      this.innerPaddedHeight,\n      this.innerPaddedWidth,\n      this.x,\n      false,\n      this.shouldCenterBaseline() && this.xAxis.gridVisible\n        ? !(this.layout === 'vertical')\n        : !(!(this.layout === 'vertical') && this.xAxis.gridVisible),\n      this.xAxis.tickInterval,\n      this.duration\n    );\n  }\n\n  drawYGrid() {\n    drawGrid(\n      this.gridG,\n      this.innerPaddedHeight,\n      this.innerPaddedWidth,\n      this.y,\n      true,\n      this.shouldCenterBaseline() && this.yAxis.gridVisible\n        ? !(this.layout === 'horizontal')\n        : !(this.layout === 'vertical' && this.yAxis.gridVisible),\n      this.yAxis.tickInterval,\n      this.duration\n    );\n  }\n\n  enterGeometries() {\n    this.enter.interrupt();\n    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';\n    const ordinalDimension = this.layout === 'vertical' ? 'width' : 'height';\n    const innerPaddedOrdinalDimension =\n      'innerPadded' + ordinalDimension[0].toUpperCase() + ordinalDimension.substring(1);\n    const valueAxis = this.layout === 'vertical' ? 'y' : 'x';\n    const valueDimension = this.layout === 'vertical' ? 'height' : 'width';\n    const choice = this.layout === 'vertical' ? 'max' : 'min';\n\n    this.enter\n      .attr('class', 'bar')\n      .on('click', !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)\n      .on('mouseover', !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i]) : null)\n      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null)\n      .attr('cursor', !this.suppressEvents ? this.cursor : null)\n      .attr('rx', this.roundedCorner)\n      .attr('ry', this.roundedCorner)\n      .attr('fill', d => {\n        // the following line could be added back in to improve performance, but it is visually quite jarring\n        // const fillSource = !select(n[i]).classed('geometryIsMoving') ? this.colorArr : this.preparedColors\n        return this.clickHighlight &&\n          this.clickHighlight.length > 0 &&\n          checkClicked(d, this.clickHighlight, this.innerInteractionKeys) &&\n          this.innerClickStyle.color\n          ? visaColors[this.innerClickStyle.color] || this.innerClickStyle.color\n          : this.hoverHighlight &&\n            checkHovered(d, this.hoverHighlight, this.innerInteractionKeys) &&\n            this.innerHoverStyle.color\n          ? visaColors[this.innerHoverStyle.color] || this.innerHoverStyle.color\n          : this.groupAccessor\n          ? this.colorArr(d[this.groupAccessor])\n          : this.colorArr(d[this.valueAccessor]);\n      })\n      .attr(valueAxis, d =>\n        this.shouldCenterBaseline()\n          ? this[valueAxis](halve(d[this.valueAccessor]) * (this.layout === 'vertical' ? 1 : -1))\n          : this[valueAxis](Math[choice](0, d[this.valueAccessor]))\n      )\n      .attr(valueDimension, d =>\n        Math.abs(\n          this.layout === 'vertical'\n            ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])\n            : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)\n        )\n      )\n      .each((_d, i, n) => {\n        initializeElementAccess(n[i]);\n      });\n    if (this.defaults) {\n      this.enter\n        .attr('opacity', d =>\n          checkInteraction(d, 1, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys)\n        )\n        .attr(ordinalAxis, d => this[ordinalAxis](d[this.ordinalAccessor]))\n        .attr(ordinalDimension, this[ordinalAxis].bandwidth());\n    } else {\n      this.enter\n        .attr('opacity', 0)\n        .attr(ordinalAxis, d => {\n          let shift = this[ordinalAxis](d[this.ordinalAccessor]) + this[ordinalAxis].bandwidth() / 2;\n          shift =\n            this[ordinalAxis](d[this.ordinalAccessor]) +\n            (this[ordinalAxis].bandwidth() / 2) * (shift / (this[innerPaddedOrdinalDimension] / 2));\n          return shift;\n        })\n        .attr(ordinalDimension, 0);\n    }\n    this.update.order();\n  }\n\n  updateGeometries() {\n    this.update.interrupt();\n\n    this.update\n      .transition('opacity')\n      .duration(this.duration)\n      .ease(easeCircleIn)\n      .attr('opacity', d =>\n        checkInteraction(d, 1, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys)\n      );\n  }\n\n  exitGeometries() {\n    this.exit.interrupt();\n    const axisOfShift = this.layout === 'vertical' ? 'x' : 'y';\n    const dimensionOfShift = this.layout === 'vertical' ? 'width' : 'height';\n    const innerPaddedDimension = 'innerPadded' + dimensionOfShift[0].toUpperCase() + dimensionOfShift.substring(1);\n\n    this.exit\n      .transition('exit')\n      .duration(this.duration)\n      .ease(easeCircleIn)\n      .attr(axisOfShift, (_d, i, n) => {\n        const self = select(n[i]);\n        let shift = +self.attr(axisOfShift) + +self.attr(dimensionOfShift) / 2;\n        shift =\n          +self.attr(axisOfShift) + (+self.attr(dimensionOfShift) / 2) * (shift / (this[innerPaddedDimension] / 2));\n        return shift;\n      })\n      .attr(dimensionOfShift, 0)\n      .attr('opacity', 0);\n\n    // We use this.update instead of this.exit to ensure the functions at the end\n    // of our lifecycle run, even though we are removing the exiting elements from\n    // inside this transition's endAll.\n    // (If we put this in this.exit, it will only run if elements exit.\n    // We want this to run every lifecycle.)\n    this.update\n      .transition('accessibilityAfterExit')\n      .duration(this.duration)\n      .ease(easeCircleIn)\n      .call(transitionEndAll, () => {\n        // before we exit geometries, we need to check if a focus exists or not\n        const focusDidExist = checkAccessFocus(this.rootG.node());\n        // then we must remove the exiting elements\n        this.exit.remove();\n        // then our util can count geometries\n        this.setChartCountAccessibility();\n        // our group's label should update with new counts too\n        this.setGroupAccessibilityID();\n        // since items exited, labels must receive updated values\n        this.setGeometryAriaLabels();\n        // and also make sure the user's focus isn't lost\n        retainAccessFocus({\n          parentGNode: this.rootG.node(),\n          focusDidExist\n          // recursive: true\n        });\n      });\n  }\n\n  drawGeometries() {\n    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';\n    const ordinalDimension = this.layout === 'vertical' ? 'width' : 'height';\n    const valueAxis = this.layout === 'vertical' ? 'y' : 'x';\n    const valueDimension = this.layout === 'vertical' ? 'height' : 'width';\n    const choice = this.layout === 'vertical' ? 'max' : 'min';\n    this.update\n      .classed('geometryIsMoving', (d, i, n) => {\n        const geometryIsUpdating = checkAttributeTransitions(select(n[i]), [\n          {\n            attr: ordinalAxis,\n            numeric: true,\n            newValue: this[ordinalAxis](d[this.ordinalAccessor])\n          },\n          {\n            attr: ordinalDimension,\n            numeric: true,\n            newValue: this[ordinalAxis].bandwidth()\n          },\n          {\n            attr: valueAxis,\n            numeric: true,\n            newValue: this.shouldCenterBaseline()\n              ? this[valueAxis](halve(d[this.valueAccessor]) * (this.layout === 'vertical' ? 1 : -1))\n              : this[valueAxis](Math[choice](0, d[this.valueAccessor]))\n          },\n          {\n            attr: valueDimension,\n            numeric: true,\n            newValue: Math.abs(\n              this.layout === 'vertical'\n                ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])\n                : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)\n            )\n          }\n        ]);\n        return geometryIsUpdating;\n      })\n      .attr('data-translate-x', this.padding.left + this.margin.left)\n      .attr('data-translate-y', this.padding.top + this.margin.top)\n      .attr(`data-${ordinalAxis}`, d => this[ordinalAxis](d[this.ordinalAccessor]))\n      .attr(`data-${ordinalDimension}`, this[ordinalAxis].bandwidth())\n      .attr(`data-${valueAxis}`, d =>\n        this.shouldCenterBaseline()\n          ? this[valueAxis](halve(d[this.valueAccessor]) * (this.layout === 'vertical' ? 1 : -1))\n          : this[valueAxis](Math[choice](0, d[this.valueAccessor]))\n      )\n      .attr(`data-${valueDimension}`, d =>\n        Math.abs(\n          this.layout === 'vertical'\n            ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])\n            : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)\n        )\n      )\n      .transition('update')\n      .duration(this.duration)\n      .ease(easeCircleIn)\n      .attr(ordinalAxis, d => this[ordinalAxis](d[this.ordinalAccessor]))\n      .attr(ordinalDimension, this[ordinalAxis].bandwidth())\n      .attr(valueAxis, d =>\n        this.shouldCenterBaseline()\n          ? this[valueAxis](halve(d[this.valueAccessor]) * (this.layout === 'vertical' ? 1 : -1))\n          : this[valueAxis](Math[choice](0, d[this.valueAccessor]))\n      )\n      .attr(valueDimension, d =>\n        Math.abs(\n          this.layout === 'vertical'\n            ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])\n            : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)\n        )\n      )\n      .call(transitionEndAll, () => {\n        this.update.classed('geometryIsMoving', false);\n\n        this.updateInteractionState();\n        this.checkLabelColorAgainstBackground();\n\n        // we must make sure if geometries move, that our focus indicator does too\n        retainAccessFocus({\n          parentGNode: this.rootG.node()\n          // focusDidExist // this only matters for exiting selections\n          // recursive: true // this only matters for\n        });\n\n        // now we can emit the event that transitions are complete\n        this.transitionEndEvent.emit({ chartID: this.chartID });\n      });\n  }\n\n  setGlobalSelections() {\n    const dataBoundToGeometries = this.bars.selectAll('.bar').data(this.preppedData, d => d[this.ordinalAccessor]);\n\n    this.enter = dataBoundToGeometries.enter().append('rect');\n    this.exit = dataBoundToGeometries.exit();\n    this.update = dataBoundToGeometries.merge(this.enter);\n\n    this.exitSize = this.exit.size();\n    this.enterSize = this.enter.size();\n\n    const dataBoundToLabels = this.labels.selectAll('text').data(this.preppedData, d => d[this.ordinalAccessor]);\n    this.enteringLabels = dataBoundToLabels.enter().append('text');\n    this.exitingLabels = dataBoundToLabels.exit();\n    this.updatingLabels = dataBoundToLabels.merge(this.enteringLabels);\n  }\n\n  setTestingAttributes() {\n    if (this.unitTest) {\n      select(this.barChartEl)\n        .select('.visa-viz-d3-bar-container')\n        .attr('data-testid', 'chart-container');\n      select(this.barChartEl)\n        .select('.bar-main-title')\n        .attr('data-testid', 'main-title');\n      select(this.barChartEl)\n        .select('.bar-sub-title')\n        .attr('data-testid', 'sub-title');\n      this.svg.attr('data-testid', 'root-svg');\n      this.root.attr('data-testid', 'margin-container');\n      this.rootG.attr('data-testid', 'padding-container');\n      this.legendG.attr('data-testid', 'legend-container');\n      this.tooltipG.attr('data-testid', 'tooltip-container');\n      this.bars.attr('data-testid', 'bar-group');\n      this.labels.attr('data-testid', 'dataLabel-group');\n      this.referencesG.attr('data-testid', 'reference-line-group');\n      this.svg.select('defs').attr('data-testid', 'pattern-defs');\n\n      this.updatingLabels.attr('data-testid', 'dataLabel').attr('data-id', d => `label-${d[this.ordinalAccessor]}`);\n      this.update.attr('data-testid', 'bar').attr('data-id', d => `bar-${d[this.ordinalAccessor]}`);\n\n      // reference lines do not have global selections\n      this.referencesG.selectAll('.bar-reference-line').attr('data-testid', 'reference-line');\n\n      this.referencesG.selectAll('.bar-reference-line-label').attr('data-testid', 'reference-line-label');\n    } else {\n      select(this.barChartEl)\n        .select('.visa-viz-d3-bar-container')\n        .attr('data-testid', null);\n      select(this.barChartEl)\n        .select('.bar-main-title')\n        .attr('data-testid', null);\n      select(this.barChartEl)\n        .select('.bar-sub-title')\n        .attr('data-testid', null);\n      this.svg.attr('data-testid', null);\n      this.root.attr('data-testid', null);\n      this.rootG.attr('data-testid', null);\n      this.legendG.attr('data-testid', null);\n      this.tooltipG.attr('data-testid', null);\n      this.bars.attr('data-testid', null);\n      this.labels.attr('data-testid', null);\n      this.referencesG.attr('data-testid', null);\n      this.svg.select('defs').attr('data-testid', null);\n\n      this.updatingLabels.attr('data-testid', null).attr('data-id', null);\n      this.update.attr('data-testid', null).attr('data-id', null);\n\n      this.referencesG.selectAll('.bar-reference-line').attr('data-testid', null);\n\n      this.referencesG.selectAll('.bar-reference-line-label').attr('data-testid', null);\n    }\n  }\n\n  renderRootElements() {\n    this.svg = select(this.barChartEl)\n      .select('.visa-viz-d3-bar-container')\n      .append('svg')\n      .attr('width', this.width)\n      .attr('height', this.height)\n      .attr('viewBox', '0 0 ' + this.width + ' ' + this.height);\n\n    this.root = this.svg.append('g').attr('id', 'visa-viz-margin-container-g-' + this.chartID);\n\n    this.rootG = this.root.append('g').attr('id', 'visa-viz-padding-container-g-' + this.chartID);\n\n    this.gridG = this.rootG.append('g').attr('class', 'grid-group');\n\n    this.bars = this.rootG.append('g').attr('class', 'bar-group');\n\n    this.labels = this.rootG.append('g').attr('class', 'bar-dataLabel-group');\n\n    this.legendG = select(this.barChartEl)\n      .select('.bar-legend')\n      .append('svg');\n\n    this.subTitleG = select(this.barChartEl).select('.bar-sub-title');\n\n    this.tooltipG = select(this.barChartEl).select('.bar-tooltip');\n\n    this.referencesG = this.rootG.append('g').attr('class', 'bar-reference-line-group');\n  }\n\n  setRoundedCorners() {\n    this.update\n      .transition('corners')\n      .duration(this.duration)\n      .ease(easeCircleIn)\n      .attr('rx', this.roundedCorner)\n      .attr('ry', this.roundedCorner);\n  }\n\n  validateClickStyle() {\n    this.innerClickStyle = this.clickStyle\n      ? this.clickStyle\n      : {\n          strokeWidth: 2\n        };\n  }\n\n  validateHoverStyle() {\n    // interaction style default\n    this.innerHoverStyle = this.hoverStyle\n      ? this.hoverStyle\n      : {\n          strokeWidth: 2\n        };\n  }\n\n  updateInteractionState() {\n    removeHoverStrokes(this.svg.node());\n    // we created an \"opacity\" transition namespace in update's transition\n    // we override it here to instantly display opacity state (below)\n    this.update.interrupt('opacity');\n\n    // we use this.update and this.labelCurrent from setGlobalSelection here\n    // the lifecycle state does not matter (enter/update/exit)\n    // since interaction state can happen at any time\n    // first we address interaction state on marks/bars\n    this.update\n      .attr('opacity', d =>\n        checkInteraction(d, 1, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys)\n      )\n      .attr('fill', d => {\n        // the following line could be added back in to improve performance, but it is visually quite jarring\n        // const fillSource = !select(n[i]).classed('geometryIsMoving') ? this.colorArr : this.preparedColors\n        return this.clickHighlight &&\n          this.clickHighlight.length > 0 &&\n          checkClicked(d, this.clickHighlight, this.innerInteractionKeys) &&\n          this.innerClickStyle.color\n          ? visaColors[this.innerClickStyle.color] || this.innerClickStyle.color\n          : this.hoverHighlight &&\n            checkHovered(d, this.hoverHighlight, this.innerInteractionKeys) &&\n            this.innerHoverStyle.color\n          ? visaColors[this.innerHoverStyle.color] || this.innerHoverStyle.color\n          : this.groupAccessor\n          ? this.colorArr(d[this.groupAccessor])\n          : this.colorArr(d[this.valueAccessor]);\n      })\n      .attr('filter', (d, i, n) => {\n        if (!this.accessibility.hideStrokes && !select(n[i]).classed('geometryIsMoving')) {\n          const colorsArray = this.preparedColors.range ? this.preparedColors.range() : this.preparedColors;\n          const scheme =\n            this.groupAccessor || colorsArray.length === 1\n              ? 'categorical'\n              : this.colorPalette && this.colorPalette.includes('diverging')\n              ? 'diverging'\n              : 'sequential';\n          const colorScale =\n            !this.accessibility.hideTextures && scheme !== 'categorical' && this.accessibility.showExperimentalTextures\n              ? 'fillColors'\n              : 'preparedColors';\n\n          const clicked =\n            this.clickHighlight &&\n            this.clickHighlight.length > 0 &&\n            checkClicked(d, this.clickHighlight, this.innerInteractionKeys);\n          const hovered = this.hoverHighlight && checkHovered(d, this.hoverHighlight, this.innerInteractionKeys);\n          const baseColor = this.groupAccessor\n            ? this[colorScale](d[this.groupAccessor])\n            : this[colorScale](d[this.valueAccessor]);\n          const state = clicked ? 'click' : hovered && !select(n[i]).classed('geometryIsMoving') ? 'hover' : 'rest';\n          const color =\n            clicked && this.innerClickStyle.color\n              ? visaColors[this.innerClickStyle.color] || this.innerClickStyle.color\n              : clicked\n              ? baseColor\n              : hovered && this.innerHoverStyle.color\n              ? visaColors[this.innerHoverStyle.color] || this.innerHoverStyle.color\n              : baseColor;\n          const strokeOverride =\n            !this.accessibility.hideTextures &&\n            scheme !== 'categorical' &&\n            this.accessibility.showExperimentalTextures &&\n            color === baseColor\n              ? this.strokeColors(d[this.groupAccessor || this.valueAccessor])\n              : undefined;\n          if (state === 'hover') {\n            drawHoverStrokes({\n              inputElement: n[i],\n              id: this.chartID,\n              key: d[this.ordinalAccessor], // this must match whatever is used to bind the data, otherwise i\n              strokeWidth: this.innerHoverStyle.strokeWidth,\n              fill: color,\n              strokeOverride\n            });\n          }\n          return this.strokes[state + color];\n        }\n        return null;\n      });\n    retainAccessFocus({\n      parentGNode: this.rootG.node()\n    });\n\n    // then we set the legend interactive state\n    setLegendInteractionState({\n      root: this.legendG,\n      uniqueID: this.chartID,\n      interactionKeys: this.innerInteractionKeys,\n      groupAccessor: this.groupAccessor,\n      hoverHighlight: this.hoverHighlight,\n      clickHighlight: this.clickHighlight,\n      hoverStyle: this.innerHoverStyle,\n      clickStyle: this.innerClickStyle,\n      hoverOpacity: this.hoverOpacity\n    });\n\n    // and lastly we have to check for labels, especially when auto placement is in place\n    this.updatingLabels.interrupt('opacity');\n    const addCollisionClass = this.placement === 'auto' || this.dataLabel.collisionHideOnly;\n    const hideOnly = this.placement !== 'auto' && this.dataLabel.collisionHideOnly;\n\n    this.processLabelOpacity(this.updatingLabels, addCollisionClass);\n\n    // if we have collision on, we need to update the bitmap on interaction\n    if (addCollisionClass) {\n      const labelsAdded = this.updatingLabels.filter((_, i, n) => select(n[i]).classed('collision-added'));\n      const labelsRemoved = this.updatingLabels\n        .filter((_, i, n) => select(n[i]).classed('collision-removed'))\n        .attr('data-use-dx', hideOnly) // need to add this for remove piece of collision below\n        .attr('data-use-dy', hideOnly); // .transition().duration(0);\n\n      // we can now remove labels as well if we need to...\n      if (labelsRemoved.size() > 0) {\n        this.bitmaps = resolveLabelCollision({\n          bitmaps: this.bitmaps,\n          labelSelection: labelsRemoved,\n          avoidMarks: [],\n          validPositions: ['middle'],\n          offsets: [1],\n          accessors: ['key'],\n          size: [roundTo(this.width, 0), roundTo(this.height, 0)],\n          hideOnly: false,\n          removeOnly: true\n        });\n\n        // remove temporary class now\n        labelsRemoved.classed('collision-removed', false);\n      }\n\n      // we can now add labels as well if we need to...\n      if (labelsAdded.size() > 0) {\n        this.processLabelPosition(labelsAdded, false, false, true);\n\n        // remove temporary class now\n        labelsAdded.classed('collision-added', false);\n      }\n    }\n  }\n\n  setLabelOpacity() {\n    this.processLabelOpacity(this.updatingLabels);\n  }\n\n  processLabelOpacity(selection, addCollisionClass?) {\n    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';\n    const ordinalDimension = this.layout === 'vertical' ? 'width' : 'height';\n    const valueAxis = this.layout === 'vertical' ? 'y' : 'x';\n    const valueDimension = this.layout === 'vertical' ? 'height' : 'width';\n    const fullBandwidth =\n      this.layout === 'vertical' ? this.innerPaddedWidth / this.data.length : this.innerPaddedHeight / this.data.length;\n\n    selection.attr('opacity', (d, i, n) => {\n      const prevOpacity = +select(n[i]).attr('opacity');\n      const styleVisibility = select(n[i]).style('visibility');\n      const dimensions = {};\n      dimensions[ordinalDimension] =\n        this.placement === 'left' || this.placement === 'bottom' ? this[ordinalAxis].bandwidth() : fullBandwidth;\n      if (this.placement === 'left' || this.placement === 'bottom') {\n        dimensions[valueDimension] = Math.abs(\n          this.layout === 'vertical'\n            ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])\n            : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)\n        );\n      }\n      const hasRoom =\n        this.placement === 'auto' ||\n        this.dataLabel.collisionHideOnly ||\n        this.accessibility.showSmallLabels ||\n        verifyTextHasSpace({\n          text: formatDataLabel(d, this.innerLabelAccessor, this.dataLabel.format),\n          dimensions,\n          fontSize: 14\n        });\n      const targetOpacity = hasRoom\n        ? checkInteraction(\n            d,\n            checkLabelDisplayOnly(this.dataLabel.visible, this.dataLabel.displayOnly, d, this.displayOnlyLabelData, [\n              this.ordinalAccessor\n            ]),\n            this.hoverOpacity,\n            this.hoverHighlight,\n            this.clickHighlight,\n            this.innerInteractionKeys\n          ) < 1\n          ? 0\n          : 1\n        : 0;\n      if (\n        ((targetOpacity === 1 && styleVisibility === 'hidden') || prevOpacity !== targetOpacity) &&\n        addCollisionClass\n      ) {\n        if (targetOpacity === 1) {\n          select(n[i])\n            .classed('collision-added', true)\n            .style('visibility', null);\n        } else {\n          select(n[i]).classed('collision-removed', true);\n        }\n      }\n      return targetOpacity;\n    });\n  }\n\n  checkLabelColorAgainstBackground() {\n    this.updatingLabels.attr('fill', this.textTreatmentHandler);\n  }\n\n  textTreatmentHandler = (d, i, n) => {\n    const colorsArray = this.preparedColors.range ? this.preparedColors.range() : this.preparedColors;\n    const scheme =\n      this.groupAccessor || colorsArray.length === 1\n        ? 'categorical'\n        : this.colorPalette && this.colorPalette.includes('diverging')\n        ? 'diverging'\n        : 'sequential';\n\n    const colorScale =\n      !this.accessibility.hideTextures && scheme !== 'categorical' && this.accessibility.showExperimentalTextures\n        ? 'fillColors'\n        : 'preparedColors';\n\n    const bgColor =\n      this.clickHighlight &&\n      this.clickHighlight.length > 0 &&\n      checkClicked(d, this.clickHighlight, this.innerInteractionKeys) &&\n      this.innerClickStyle.color\n        ? visaColors[this.innerClickStyle.color] || this.innerClickStyle.color\n        : this.hoverHighlight &&\n          checkHovered(d, this.hoverHighlight, this.innerInteractionKeys) &&\n          this.innerHoverStyle.color\n        ? visaColors[this.innerHoverStyle.color] || this.innerHoverStyle.color\n        : this.groupAccessor\n        ? this[colorScale](d[this.groupAccessor])\n        : this[colorScale](d[this.valueAccessor]);\n    const me = select(n[i]);\n    const autoPlacementBackgroundColor =\n      this.placement === 'auto' // can ignore this for collisionHideOnly\n        ? this.layout === 'vertical'\n          ? (this.dataLabel.collisionPlacement === 'top' && me.attr('data-baseline') !== 'bottom') ||\n            (this.dataLabel.collisionPlacement === 'middle' && me.attr('data-baseline') !== 'bottom') ||\n            (this.dataLabel.collisionPlacement === 'bottom' &&\n              me.attr('data-baseline') === 'bottom' &&\n              ((d[this.valueAccessor] >= 0 && this.y(0) - this.y(d[this.valueAccessor]) > 20) ||\n                (d[this.valueAccessor] < 0 && this.y(0) - this.y(d[this.valueAccessor]) < -20))) // if bottom we can check against baseline value of 0, helps to handle charts with negative values\n          : (this.dataLabel.collisionPlacement === 'right' && me.attr('data-align') !== 'left') ||\n            (this.dataLabel.collisionPlacement === 'middle' && me.attr('data-align') !== 'left') ||\n            (this.dataLabel.collisionPlacement === 'left' && me.attr('data-align') !== 'right')\n        : false;\n    const color =\n      autoPlacementBackgroundColor || this.placement === 'bottom' || this.placement === 'left'\n        ? autoTextColor(bgColor)\n        : visaColors.dark_text;\n    me.attr(\n      'filter',\n      !me.classed('textIsMoving')\n        ? createTextStrokeFilter({\n            root: this.svg.node(),\n            id: this.chartID,\n            color:\n              autoPlacementBackgroundColor || this.placement === 'bottom' || this.placement === 'left'\n                ? bgColor\n                : '#ffffff'\n          })\n        : null\n    );\n    return color;\n  };\n\n  setSelectedClass() {\n    this.update\n      .classed('highlight', d => {\n        const selected = checkInteraction(d, true, false, '', this.clickHighlight, this.innerInteractionKeys);\n        return this.clickHighlight && this.clickHighlight.length ? selected : false;\n      })\n      .each((d, i, n) => {\n        let selected = checkInteraction(d, true, false, '', this.clickHighlight, this.innerInteractionKeys);\n        selected = this.clickHighlight && this.clickHighlight.length ? selected : false;\n        const selectable = this.accessibility.elementsAreInterface;\n        setElementInteractionAccessState(n[i], selected, selectable);\n      });\n  }\n\n  updateCursor() {\n    this.update.attr('cursor', !this.suppressEvents ? this.cursor : null);\n    this.updatingLabels.attr('cursor', !this.suppressEvents ? this.cursor : null);\n  }\n\n  bindLegendInteractivity() {\n    select(this.barChartEl)\n      .selectAll('.legend')\n      .on('click', this.legend.interactive && !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)\n      .on(\n        'mouseover',\n        this.legend.interactive && !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i], true) : null\n      )\n      .on('mouseout', this.legend.interactive && !this.suppressEvents ? () => this.onMouseOutHandler() : null);\n  }\n\n  setLegendCursor() {\n    select(this.barChartEl)\n      .selectAll('.legend')\n      .style('cursor', this.legend.interactive && !this.suppressEvents ? this.cursor : null);\n  }\n\n  bindInteractivity() {\n    this.update\n      .on('click', !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)\n      .on('mouseover', !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i]) : null)\n      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null);\n    this.updatingLabels\n      .on('click', !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)\n      .on('mouseover', !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i]) : null)\n      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null);\n  }\n\n  enterLabels() {\n    this.enteringLabels\n      .attr('opacity', d => {\n        return checkInteraction(\n          d,\n          checkLabelDisplayOnly(this.dataLabel.visible, this.dataLabel.displayOnly, d, this.displayOnlyLabelData, [\n            this.ordinalAccessor\n          ]),\n          this.hoverOpacity,\n          this.hoverHighlight,\n          this.clickHighlight,\n          this.innerInteractionKeys\n        ) < 1\n          ? 0\n          : Number.EPSILON; // we need this to be epsilon initially to enable auto placement algorithm to run on load\n      })\n      .attr('class', 'bar-dataLabel entering') // entering class is used by collision\n      .attr('fill', this.textTreatmentHandler)\n      .attr('cursor', !this.suppressEvents ? this.cursor : null)\n      .on('click', !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)\n      .on('mouseover', !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i]) : null)\n      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null);\n\n    // placeDataLabels({\n    //   root: this.enteringLabels,\n    //   xScale: this.x,\n    //   yScale: this.y,\n    //   ordinalAccessor: this.ordinalAccessor,\n    //   valueAccessor: this.valueAccessor,\n    //   placement: this.placement,\n    //   layout: this.layout,\n    //   chartType: 'bar'\n    // });\n  }\n\n  updateLabels() {\n    const enterTransition = this.updatingLabels\n      .transition('opacity')\n      .ease(easeCircleIn)\n      .duration(this.duration);\n\n    this.processLabelOpacity(enterTransition);\n  }\n\n  exitLabels() {\n    this.exitingLabels\n      .transition('exit')\n      .ease(easeCircleIn)\n      .duration(this.duration / 2)\n      .attr('opacity', 0)\n      .remove();\n  }\n\n  setLabelContent() {\n    this.updatingLabels.text(d => formatDataLabel(d, this.innerLabelAccessor, this.dataLabel.format));\n  }\n\n  setLabelPosition() {\n    const enteringOnly = this.enteringLabels.filter((_, i, n) => {\n      return select(n[i]).classed('entering');\n    });\n    const updatingOnly = this.updatingLabels.filter((_, i, n) => {\n      return !select(n[i]).classed('entering');\n    });\n    // if we have enter and update we need to process them separately\n    // enter with no transition, update with transition\n    if (enteringOnly.size() > 0) {\n      this.processLabelPosition(enteringOnly, false, true, false);\n      this.processLabelPosition(updatingOnly, true, false, true);\n    } else {\n      // otherwise we can just process update and do it all in one step with transition\n      this.processLabelPosition(updatingOnly, true, true, false);\n    }\n  }\n\n  processLabelPosition(selection, runTransition?, redrawBitmap?, suppressMarkDraw?) {\n    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';\n    const ordinalDimension = this.layout === 'vertical' ? 'width' : 'height';\n    const valueAxis = this.layout === 'vertical' ? 'y' : 'x';\n    const valueDimension = this.layout === 'vertical' ? 'height' : 'width';\n    const choice = this.layout === 'vertical' ? 'max' : 'min';\n    let textHeight = 15; // default label is usually 15\n    const hideOnly = this.placement !== 'auto' && this.dataLabel.collisionHideOnly;\n\n    const collisionSettings = {\n      vertical: {\n        top: {\n          validPositions: ['top', 'bottom'],\n          offsets: [5, 1]\n        },\n        middle: {\n          validPositions: ['middle', 'top'],\n          offsets: [1, textHeight / 2]\n        },\n        bottom: {\n          validPositions: ['middle', 'top'],\n          offsets: [1, textHeight / 2]\n        }\n      },\n      horizontal: {\n        right: {\n          validPositions: ['right', 'left'],\n          offsets: [4, 8]\n        },\n        middle: {\n          validPositions: ['middle', 'right'],\n          offsets: [1, 15]\n        },\n        left: {\n          validPositions: ['left', 'right'],\n          offsets: [4, 20]\n        }\n      }\n    };\n\n    const collisionPlacement = this.dataLabel && this.dataLabel.collisionPlacement;\n    const boundsScope =\n      collisionPlacement && collisionSettings[this.layout][collisionPlacement] // check whether placement provided maps correctly\n        ? this.dataLabel.collisionPlacement\n        : this.layout === 'vertical'\n        ? 'top' // if we don't have collisionPlacement\n        : 'right';\n\n    selection\n      .style('visibility', (_, i, n) => {\n        if (i === 0) {\n          // we just need to check this on one element\n          const textElement = n[i];\n          const style = getComputedStyle(textElement);\n          const fontSize = parseFloat(style.fontSize);\n          textHeight = Math.max(fontSize - 1, 1); // clone.getBBox().height;\n        }\n\n        return this.placement === 'auto' || this.dataLabel.collisionHideOnly ? select(n[i]).style('visibility') : null;\n      })\n      .attr(`data-${ordinalAxis}`, d => this[ordinalAxis](d[this.ordinalAccessor]))\n      .attr(`data-${ordinalDimension}`, this[ordinalAxis].bandwidth())\n      .attr(`data-${valueAxis}`, d =>\n        this.shouldCenterBaseline()\n          ? this[valueAxis](halve(d[this.valueAccessor]) * (this.layout === 'vertical' ? 1 : -1))\n          : this[valueAxis](Math[choice](0, d[this.valueAccessor]))\n      )\n      .attr(`data-${valueDimension}`, d =>\n        Math.abs(\n          this.layout === 'vertical'\n            ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])\n            : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)\n        )\n      )\n      .attr('data-translate-x', this.padding.left + this.margin.left)\n      .attr('data-translate-y', this.padding.top + this.margin.top);\n\n    const changeLabels = prepareRenderChange({\n      selection: selection,\n      duration: !runTransition ? 0 : this.duration,\n      namespace: 'position-labels',\n      easing: easeCircleIn\n    });\n\n    this.bitmaps = placeDataLabels({\n      root: changeLabels,\n      xScale: this.x,\n      yScale: this.y,\n      ordinalAccessor: this.ordinalAccessor,\n      valueAccessor: this.valueAccessor,\n      placement: this.placement,\n      layout: this.layout,\n      labelOffset: this.shouldCenterBaseline() ? halve(1) : undefined,\n      chartType: 'bar',\n      avoidCollision: {\n        runOccupancyBitmap: this.dataLabel.visible && this.placement === 'auto',\n        bitmaps: !redrawBitmap ? this.bitmaps : undefined,\n        labelSelection: changeLabels,\n        avoidMarks: [this.update],\n        validPositions: hideOnly ? ['middle'] : collisionSettings[this.layout][boundsScope].validPositions,\n        offsets: hideOnly ? [1] : collisionSettings[this.layout][boundsScope].offsets,\n        accessors: [this.ordinalAccessor, this.groupAccessor], // key is created for lines by nesting done in line,\n        size: [roundTo(this.width, 0), roundTo(this.height, 0)], // for some reason the bitmap needs width instead of inner padded width here\n        boundsScope: hideOnly ? undefined : boundsScope,\n        hideOnly: this.dataLabel.visible && this.dataLabel.collisionHideOnly,\n        suppressMarkDraw: suppressMarkDraw\n      }\n    });\n  }\n\n  drawReferenceLines() {\n    setReferenceLine({\n      groupName: 'bar',\n      root: this.referencesG,\n      referenceLines: this.referenceLines,\n      referenceStyle: this.referenceStyle,\n      innerPaddedWidth: this.innerPaddedWidth,\n      innerPaddedHeight: this.innerPaddedHeight,\n      duration: this.duration,\n      layout: this.layout,\n      x: this.x,\n      y: this.y,\n      unitTest: this.unitTest\n    });\n  }\n\n  drawLegendElements() {\n    drawLegend({\n      root: this.legendG,\n      uniqueID: this.chartID,\n      width: this.innerPaddedWidth,\n      height: this.margin.top + 20,\n      colorArr: this.colorArr,\n      baseColorArr: this.preparedColors,\n      hideStrokes: this.accessibility.hideStrokes,\n      margin: this.margin,\n      padding: this.padding,\n      duration: this.duration,\n      type: 'bar',\n      fontSize: 16,\n      data: this.legendData,\n      labelKey: this.groupAccessor,\n      label: this.legend.labels,\n      format: this.legend.format,\n      hide: !this.legend.visible || !this.groupAccessor, // only allow legend when there is groupAccessor\n      interactionKeys: this.innerInteractionKeys,\n      groupAccessor: this.groupAccessor,\n      hoverHighlight: this.hoverHighlight,\n      clickHighlight: this.clickHighlight,\n      hoverStyle: this.innerHoverStyle,\n      clickStyle: this.innerClickStyle,\n      hoverOpacity: this.hoverOpacity\n    });\n  }\n\n  drawAnnotations() {\n    annotate({\n      source: this.rootG.node(),\n      data: this.annotations,\n      xScale: this.x,\n      xAccessor: this.layout !== 'horizontal' ? this.ordinalAccessor : this.valueAccessor,\n      yScale: this.y,\n      yAccessor: this.layout !== 'horizontal' ? this.valueAccessor : this.ordinalAccessor,\n      width: this.width,\n      height: this.height,\n      padding: this.padding,\n      margin: this.margin,\n      bitmaps: this.bitmaps\n    });\n  }\n\n  setAnnotationAccessibility() {\n    setAccessAnnotation(this.getLanguageString(), this.barChartEl, this.annotations, this.referenceLines);\n  }\n\n  // new accessibility functions added here\n  setChartDescriptionWrapper() {\n    initializeDescriptionRoot({\n      language: this.getLanguageString(),\n      rootEle: this.barChartEl,\n      title: this.accessibility.title || this.mainTitle,\n      chartTag: 'bar-chart',\n      uniqueID: this.chartID,\n      highestHeadingLevel: this.highestHeadingLevel,\n      redraw: this.shouldRedrawWrapper,\n      disableKeyNav:\n        this.suppressEvents &&\n        this.accessibility.elementsAreInterface === false &&\n        this.accessibility.keyboardNavConfig &&\n        this.accessibility.keyboardNavConfig.disabled,\n      hideDataTable: this.accessibility.hideDataTableButton\n    });\n    this.shouldRedrawWrapper = false;\n  }\n\n  setParentSVGAccessibility() {\n    setAccessibilityController({\n      chartTag: 'bar-chart',\n      language: this.getLanguageString(),\n      node: this.svg.node(),\n      title: this.accessibility.title || this.mainTitle,\n      description: this.subTitle,\n      uniqueID: this.chartID,\n      geomType: 'bar',\n      includeKeyNames: this.accessibility.includeDataKeyNames,\n      dataKeys: scopeDataKeys(this, chartAccessors, 'bar-chart'),\n      dataKeyNames: this.dataKeyNames,\n      groupAccessor: this.groupAccessor,\n      disableKeyNav:\n        this.suppressEvents &&\n        this.accessibility.elementsAreInterface === false &&\n        this.accessibility.keyboardNavConfig &&\n        this.accessibility.keyboardNavConfig.disabled\n      // groupName: 'node', // bar chart does not include these\n      // groupKeys: [], // bar chart does not include these\n      // nested: '', // bar chart does not include these\n      // recursive: true // bar chart does not include these\n    });\n  }\n\n  setGeometryAccessibilityAttributes() {\n    this.update.each((_d, i, n) => {\n      initializeElementAccess(n[i]);\n    });\n  }\n\n  setGeometryAriaLabels() {\n    const keys = scopeDataKeys(this, chartAccessors, 'bar-chart');\n    this.update.each((_d, i, n) => {\n      setElementFocusHandler({\n        chartTag: 'bar-chart',\n        language: this.getLanguageString(),\n        node: n[i],\n        geomType: 'bar',\n        includeKeyNames: this.accessibility.includeDataKeyNames,\n        dataKeys: keys,\n        dataKeyNames: this.dataKeyNames,\n        uniqueID: this.chartID,\n        disableKeyNav:\n          this.suppressEvents &&\n          this.accessibility.elementsAreInterface === false &&\n          this.accessibility.keyboardNavConfig &&\n          this.accessibility.keyboardNavConfig.disabled\n      });\n      setElementAccessID({\n        node: n[i],\n        uniqueID: this.chartID\n      });\n    });\n  }\n\n  setGroupAccessibilityAttributes() {\n    // if a component's <g> elements can enter/exit, this will need to be called in the\n    // lifecycle more than just initially, like how setGeometryAccessibilityAttributes works\n    initializeElementAccess(this.bars.node());\n  }\n\n  setGroupAccessibilityID() {\n    this.bars.each((_, i, n) => {\n      setElementAccessID({\n        node: n[i],\n        uniqueID: this.chartID\n      });\n    });\n  }\n\n  setChartAccessibilityTitle() {\n    setAccessTitle(this.getLanguageString(), this.barChartEl, this.accessibility.title || this.mainTitle);\n  }\n\n  setChartAccessibilitySubtitle() {\n    setAccessSubtitle(this.getLanguageString(), this.barChartEl, this.subTitle);\n  }\n\n  setChartAccessibilityLongDescription() {\n    setAccessLongDescription(this.getLanguageString(), this.barChartEl, this.accessibility.longDescription);\n  }\n\n  setChartAccessibilityExecutiveSummary() {\n    setAccessExecutiveSummary(this.getLanguageString(), this.barChartEl, this.accessibility.executiveSummary);\n  }\n\n  setChartAccessibilityPurpose() {\n    setAccessPurpose(this.getLanguageString(), this.barChartEl, this.accessibility.purpose);\n  }\n\n  setChartAccessibilityContext() {\n    setAccessContext(this.getLanguageString(), this.barChartEl, this.accessibility.contextExplanation);\n  }\n\n  setChartAccessibilityStatisticalNotes() {\n    setAccessStatistics(this.getLanguageString(), this.barChartEl, this.accessibility.statisticalNotes);\n  }\n\n  setChartCountAccessibility() {\n    setAccessChartCounts({\n      rootEle: this.barChartEl,\n      parentGNode: this.bars.node(), // pass the wrapper to <g> or geometries here, should be single node selection\n      chartTag: 'bar-chart',\n      geomType: 'bar'\n      // groupName: 'line', // bar chart doesn't use this, so it is omitted\n      // recursive: true // bar chart doesn't use this, so it is omitted\n    });\n  }\n\n  setChartAccessibilityStructureNotes() {\n    setAccessStructure(this.getLanguageString(), this.barChartEl, this.accessibility.structureNotes);\n  }\n  // new accessibility stuff ends here\n\n  onChangeHandler() {\n    if (this.accessibility && typeof this.accessibility.onChangeFunc === 'function') {\n      const d = {\n        updated: this.updated,\n        added: this.enterSize,\n        removed: this.exitSize\n      };\n      this.accessibility.onChangeFunc(d);\n    }\n    this.updated = false;\n    this.enterSize = 0;\n    this.exitSize = 0;\n  }\n\n  onClickHandler(d, n) {\n    this.clickEvent.emit({ data: d, target: n });\n  }\n\n  onHoverHandler(d, n, isLegend?) {\n    overrideTitleTooltip(this.chartID, true);\n    this.hoverEvent.emit({ data: d, target: n });\n    if (this.showTooltip && !isLegend) {\n      this.eventsTooltip({ data: d, evt: event, isToShow: true });\n    }\n  }\n\n  onMouseOutHandler() {\n    overrideTitleTooltip(this.chartID, false);\n    this.mouseOutEvent.emit();\n    if (this.showTooltip) {\n      this.eventsTooltip({ isToShow: false });\n    }\n  }\n\n  // set initial style (instead of copying css class across the lib)\n  setTooltipInitialStyle() {\n    initTooltipStyle(this.tooltipG);\n  }\n\n  // tooltip\n  eventsTooltip({ data, evt, isToShow }: { data?: any; evt?: any; isToShow: boolean }) {\n    drawTooltip({\n      root: this.tooltipG,\n      data,\n      event: evt,\n      isToShow,\n      tooltipLabel: this.tooltipLabel,\n      dataKeyNames: this.dataKeyNames,\n      xAxis: this.xAxis,\n      yAxis: this.yAxis,\n      dataLabel: this.dataLabel,\n      layout: this.layout,\n      ordinalAccessor: this.ordinalAccessor,\n      valueAccessor: this.valueAccessor,\n      groupAccessor: this.groupAccessor,\n      chartType: 'bar'\n    });\n  }\n\n  render() {\n    this.drawStartEvent.emit({ chartID: this.chartID });\n\n    // theme hardcoded until we re-enable it\n    const theme = 'light';\n    // everything between this comment and the third should eventually\n    // be moved into componentWillUpdate (if the Stencil bug is fixed)\n    this.init();\n    if (this.shouldSetLocalizationConfig) {\n      this.setLocalizationConfig();\n      this.shouldSetLocalizationConfig = false;\n    }\n    if (this.shouldSetTagLevels) {\n      this.setTagLevels();\n      this.shouldSetTagLevels = false;\n    }\n    if (this.shouldCheckValueAxis) {\n      if (this.layout === 'horizontal') {\n        this.shouldUpdateXAxis = true;\n        this.shouldSetXAxisAccessibility = true;\n        this.shouldUpdateXGrid = true;\n      } else if (this.layout === 'vertical') {\n        this.shouldUpdateYAxis = true;\n        this.shouldSetYAxisAccessibility = true;\n        this.shouldUpdateYGrid = true;\n      }\n      this.shouldCheckValueAxis = false;\n    }\n    if (this.shouldCheckLabelAxis) {\n      if (this.layout === 'vertical') {\n        this.shouldUpdateXAxis = true;\n        this.shouldSetXAxisAccessibility = true;\n      } else if (this.layout === 'horizontal') {\n        this.shouldUpdateYAxis = true;\n        this.shouldSetYAxisAccessibility = true;\n      }\n      this.shouldCheckLabelAxis = false;\n    }\n    if (this.shouldUpdateData) {\n      this.prepareData();\n      this.shouldUpdateData = false;\n    }\n    if (this.shouldUpdateLegendData) {\n      this.prepareLegendData();\n      this.shouldUpdateLegendData = false;\n    }\n    if (this.shouldUpdateLabelData) {\n      this.prepareLabelData();\n      this.shouldUpdateLabelData = false;\n    }\n    if (this.shouldUpdateLayoutVariables) {\n      this.updateChartVariable();\n      this.shouldUpdateLayoutVariables = false;\n    }\n    if (this.shouldUpdateScales) {\n      this.prepareScales();\n      this.shouldUpdateScales = false;\n    }\n    if (this.shouldValidateInteractionKeys) {\n      this.validateInteractionKeys();\n      this.shouldValidateInteractionKeys = false;\n    }\n    if (this.shouldUpdateTableData) {\n      this.setTableData();\n      this.shouldUpdateTableData = false;\n    }\n    if (this.shouldValidate) {\n      this.shouldValidateAccessibilityProps();\n      this.shouldValidateLocalizationProps();\n      this.shouldValidate = false;\n    }\n    if (this.shouldValidateClickStyle) {\n      this.validateClickStyle();\n      this.shouldValidateClickStyle = false;\n    }\n    if (this.shouldValidateHoverStyle) {\n      this.validateHoverStyle();\n      this.shouldValidateHoverStyle = false;\n    }\n    if (this.shouldValidateDataLabelAccessor) {\n      this.validateDataLabelAccessor();\n      this.shouldValidateDataLabelAccessor = false;\n    }\n    if (this.shouldSetColors) {\n      this.setColors();\n      this.shouldSetColors = false;\n    }\n    if (this.shouldValidateLabelPlacement) {\n      this.validateLabelPlacement();\n      this.shouldValidateLabelPlacement = false;\n    }\n\n    // Everything between this comment and the first should eventually\n    // be moved into componentWillUpdate (if the Stencil bug is fixed)\n    return (\n      <div class={`o-layout is--${this.layout} ${theme}`}>\n        <div class=\"o-layout--chart\">\n          <this.topLevel class=\"bar-main-title vcl-main-title\">{this.mainTitle}</this.topLevel>\n          <this.bottomLevel class=\"visa-ui-text--instructions bar-sub-title vcl-sub-title\" />\n          <div\n            class=\"bar-legend vcl-legend\"\n            style={{ display: this.legend.visible && this.groupAccessor ? 'block' : 'none' }}\n          />\n          <keyboard-instructions\n            uniqueID={this.chartID}\n            geomType={'bar'}\n            groupName={'bar group'} // taken from initializeDescriptionRoot, on bar this should be \"bar group\", stacked bar is \"stack\", and clustered is \"cluster\"\n            language={this.getLanguageString()}\n            chartTag={'bar-chart'}\n            width={this.width - (this.margin ? this.margin.right || 0 : 0)}\n            isInteractive={this.accessibility.elementsAreInterface}\n            hasCousinNavigation={this.groupAccessor ? true : false} // on bar this requires checking for groupAccessor\n            disabled={\n              this.suppressEvents &&\n              this.accessibility.elementsAreInterface === false &&\n              this.accessibility.keyboardNavConfig &&\n              this.accessibility.keyboardNavConfig.disabled\n            } // the chart is \"simple\"\n          />\n          <div class=\"visa-viz-d3-bar-container\" />\n          <div class=\"bar-tooltip vcl-tooltip\" style={{ display: this.showTooltip ? 'block' : 'none' }} />\n          <data-table\n            uniqueID={this.chartID}\n            isCompact\n            language={this.getLanguageString()}\n            tableColumns={this.tableColumns}\n            dataKeyNames={this.dataKeyNames}\n            data={this.tableData}\n            padding={this.padding}\n            margin={this.margin}\n            hideDataTable={this.accessibility.hideDataTableButton}\n            unitTest={this.unitTest}\n          />\n        </div>\n        {/* <canvas id=\"bitmap-render\" /> */}\n      </div>\n    );\n  }\n  private init() {\n    // reading properties\n    const keys = Object.keys(BarChartDefaultValues);\n    let i = 0;\n    const exceptions = {\n      showTooltip: {\n        exception: false\n      },\n      mainTitle: {\n        exception: ''\n      },\n      subTitle: {\n        exception: ''\n      },\n      barIntervalRatio: {\n        exception: 0\n      },\n      wrapLabel: {\n        exception: false\n      },\n      hoverOpacity: {\n        exception: 0\n      }\n    };\n    for (i = 0; i < keys.length; i++) {\n      const exception = !exceptions[keys[i]] ? false : this[keys[i]] === exceptions[keys[i]].exception;\n      this[keys[i]] = this[keys[i]] || exception ? this[keys[i]] : BarChartDefaultValues[keys[i]];\n    }\n  }\n}\n\n// incorporate OSS licenses into build\nwindow['VisaChartsLibOSSLicenses'] = getLicenses(); // tslint:disable-line no-string-literal\n"],"mappings":"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","ignoreList":[]}