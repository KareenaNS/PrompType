/**
 *              Â© 2025 Visa
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **/
import { KeyboardEvent, MutableRefObject } from 'react';
import { FocusableHTMLElement } from '../types';
export type UseAccordionOptions<HTMLElementType> = {
    /** Default expanded state of the accordion */
    defaultExpanded?: (number | string)[] | number | string | undefined;
    /** Ref for the accordion elements */
    ref?: MutableRefObject<(HTMLElementType | null)[]>;
};
/**
 * @docs {@link https://design.visa.com/react/hooks/use-accordion | See Docs}
 * @description This hook is used to manage the open state and keyboard navigation of accordions.
 * @related accordion
 * @vgar TODO
 * @wcag TODO
 */
export declare const useAccordion: {
    <HTMLElementType extends FocusableHTMLElement = HTMLButtonElement>(useAccordionOptions?: UseAccordionOptions<HTMLElementType>): {
        /** Function that takes in index or id of element and returns expanded boolean */
        isIndexExpanded: (index: number | string) => boolean;
        /** Function that handles on key down for navigation */
        onKeyNavigation: (e: KeyboardEvent) => void;
        /** Ref object to use if ref isn't supplied in props */
        ref: MutableRefObject<(HTMLElementType | null)[]>;
        /** Callback to toggle accordion expanded state */
        toggleIndexExpanded: (index: number | string) => void;
    };
    displayName: string;
    defaultProps: {
        defaultExpanded: string;
    };
};
export default useAccordion;
